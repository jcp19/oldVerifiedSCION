// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package path

import (
	"encoding/binary"
	"time"

	"gobra/lib/serrors"
)

const (
	// HopLen is the size of a HopField in bytes.
	HopLen = 12
	// MacLen is the size of the MAC of each HopField.
	MacLen = 6
)

// MaxTTL is the maximum age of a HopField in seconds.
const MaxTTL = 24 * 60 * 60 // One day in seconds

const expTimeUnit = MaxTTL / 256 // ~5m38s

// HopField is the HopField used in the SCION and OneHop path types.
//
// The Hop Field has the following format:
//    0                   1                   2                   3
//    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
//   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//   |r r r r r r I E|    ExpTime    |           ConsIngress         |
//   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//   |        ConsEgress             |                               |
//   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
//   |                              MAC                              |
//   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//
type HopField struct {
	// IngressRouterAlert flag. If the IngressRouterAlert is set, the ingress router (in
	// construction direction) will process the L4 payload in the packet.
	IngressRouterAlert bool
	// EgressRouterAlert flag. If the EgressRouterAlert is set, the egress router (in
	// construction direction) will process the L4 payload in the packet.
	EgressRouterAlert bool
	// Exptime is the expiry time of a HopField. The field is 1-byte long, thus there are 256
	// different values available to express an expiration time. The expiration time expressed by
	// the value of this field is relative, and an absolute expiration time in seconds is computed
	// in combination with the timestamp field (from the corresponding info field) as follows
	//
	// Timestamp + (1 + ExpTime) * (24*60*60)/256
	ExpTime uint8
	// ConsIngress is the ingress interface ID in construction direction.
	ConsIngress uint16
	// ConsEgress is the egress interface ID in construction direction.
	ConsEgress uint16
	// Mac is the 6-byte Message Authentication Code to authenticate the HopField.
	Mac []byte
}

pred HopFieldInv(h *HopField) {
	acc(h) &&
	len(h.Mac) == MacLen &&
	forall i int :: 0 <= i &&
	i < len(h.Mac) ==> acc(&(h.Mac)[i])
}

// (tlino) added getters to simplify verification
requires acc(HopFieldInv(h), 1/1000)
ensures res == unfolding acc(HopFieldInv(h), 1/1000) in h.IngressRouterAlert
decreases
pure func (h *HopField) GetIngressRouterAlert() (res bool) {
	return unfolding acc(HopFieldInv(h), 1/1000) in h.IngressRouterAlert
}

requires acc(HopFieldInv(h), 1/1000)
ensures res == unfolding acc(HopFieldInv(h), 1/1000) in h.EgressRouterAlert
decreases
pure func (h *HopField) GetEgressRouterAlert() (res bool) {
	return unfolding acc(HopFieldInv(h), 1/1000) in h.EgressRouterAlert
}

requires acc(HopFieldInv(h), 1/1000)
ensures res == unfolding acc(HopFieldInv(h), 1/1000) in h.ExpTime
decreases
pure func (h *HopField) GetExpTime() (res uint8) {
	return unfolding acc(HopFieldInv(h), 1/1000) in h.ExpTime
}

requires acc(HopFieldInv(h), 1/1000)
ensures res == unfolding acc(HopFieldInv(h), 1/1000) in h.ConsIngress
decreases
pure func (h *HopField) GetConsIngress() (res uint16) {
	return unfolding acc(HopFieldInv(h), 1/1000) in h.ConsIngress
}

requires acc(HopFieldInv(h), 1/1000)
ensures res == unfolding acc(HopFieldInv(h), 1/1000) in h.ConsEgress
decreases
pure func (h *HopField) GetConsEgress() (res uint16) {
	return unfolding acc(HopFieldInv(h), 1/1000) in h.ConsEgress
}

// (joao) verifies, as expected
// func soundHopFieldInv() {
// 	hop := &HopField{}
// 	hop.Mac = make([]byte, 6)
// 	fold HopFieldInv(hop)
// }

// DecodeFromBytes populates the fields from a raw buffer. The buffer must be of length >=
// path.HopLen
requires acc(h)
preserves forall i int :: 0 <= i && i < len(raw) ==> acc(&raw[i], 1/1000)
ensures res == nil ==> HopFieldInv(h)
ensures res != nil ==> acc(h)
ensures len(raw) >= HopLen ==> res == nil
decreases
func (h *HopField) DecodeFromBytes(raw []byte) (res error) {
	if len(raw) < HopLen {
		return serrors.New("HopField raw too short", "expected", HopLen, "actual", len(raw))
	}
	h.EgressRouterAlert = (raw[0] & 0x1) == 0x1
	h.IngressRouterAlert = (raw[0] & 0x2) == 0x2
	h.ExpTime = raw[1]

	assert &raw[2:4][0] == &raw[2] && &raw[2:4][1] == &raw[3]
	h.ConsIngress = binary.BigEndian.Uint16(raw[2:4])
	assert &raw[4:6][0] == &raw[4] && &raw[4:6][1] == &raw[5]
	h.ConsEgress = binary.BigEndian.Uint16(raw[4:6])

	// (joao) introduced temporary variable tmp to simplify intermediate assertions
	assert len(raw[6:6+MacLen]) == MacLen
	assert &raw[6:6+MacLen][0] == &raw[6]
	assert &raw[6:6+MacLen][1] == &raw[7]
	assert &raw[6:6+MacLen][2] == &raw[8]
	assert &raw[6:6+MacLen][3] == &raw[9]
	assert &raw[6:6+MacLen][4] == &raw[10]
	assert &raw[6:6+MacLen][5] == &raw[11]
	// (joao) outlining this call to append does not have obvious performance implications
	// tmp := outlineAppend(raw[6:6+MacLen])
	tmp := append(perm(1/2000), []byte(nil), raw[6:6+MacLen]...)
	assert len(tmp) == MacLen
	assert forall i int :: 0 <= i && i < len(tmp) ==> acc(&tmp[i])
	h.Mac = tmp
	fold HopFieldInv(h)
	return nil
}

// (joao) outlining call to append above (outline keyword crashes gobra)
// requires len(s) == MacLen
// preserves forall i int :: 0 <= i && i < len(s) ==> acc(&s[i], 1/2000)
// ensures len(res) == MacLen
// ensures forall i int :: 0 <= i && i < len(res) ==> acc(&res[i])
// ensures forall i int :: 0 <= i && i < len(res) ==> res[i] == s[i]
// func outlineAppend(s []byte) (res []byte) {
// 	tmpSlice := []byte(nil)
// 	assert len(tmpSlice) == 0
// 	assert forall i int :: 0 <= i && i < len(tmpSlice) ==> acc(&tmpSlice[i])
// 	tmp := append(perm(1/2000), tmpSlice, s.../*raw[6:6+MacLen]...*/)
// 	return tmp
// }

// SerializeTo writes the fields into the provided buffer. The buffer must be of length >=
// path.HopLen
preserves acc(HopFieldInv(h), 1/1000)
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
ensures len(b) >= HopLen ==> err == nil
decreases
func (h *HopField) SerializeTo(b []byte) (err error) {
	if len(b) < HopLen {
		return serrors.New("buffer for HopField too short", "expected", MacLen, "actual", len(b))
	}
	unfold acc(HopFieldInv(h), 1/1000)
	b[0] = 0
	if h.EgressRouterAlert {
		b[0] |= 0x1
	}
	if h.IngressRouterAlert {
		b[0] |= 0x2
	}
	b[1] = h.ExpTime

	assert &b[2:4][0] == &b[2] && &b[2:4][1] == &b[3]
	binary.BigEndian.PutUint16(b[2:4], h.ConsIngress)
	assert &b[4:6][0] == &b[4] && &b[4:6][1] == &b[5]
	binary.BigEndian.PutUint16(b[4:6], h.ConsEgress)

	assert &b[6:12][0] == &b[6] && &b[6:12][1] == &b[7]
	assert &b[6:12][2] == &b[8] && &b[6:12][3] == &b[9]
	assert &b[6:12][4] == &b[10] && &b[6:12][5] == &b[11]
// (joao) outlining this call to copy reduces the verification time from ~8 min to ~3 min
//  	copy(b[6:12], h.Mac, perm(1/2000))
	outlineCopy(b[6:12], h.Mac)
	fold acc(HopFieldInv(h), 1/1000)

	return nil
}

preserves forall i int :: (0 <= i && i < len(dst)) ==> acc(&dst[i])
preserves forall i int :: (0 <= i && i < len(src)) ==> acc(&src[i], 1/2000)
decreases
func outlineCopy(dst, src []byte) {
	copy(dst, src, perm(1/2000))
}

// ExpTimeToDuration calculates the relative expiration time in seconds.
// Note that for a 0 value ExpTime, the minimal duration is expTimeUnit.
decreases
func ExpTimeToDuration(expTime uint8) time.Duration {
	return (time.Duration(expTime) + 1) * time.Duration(expTimeUnit) * time.Second
}