// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package scion

import (
	"gobra/lib/serrors"
	"gobra/lib/slayers/path"
)

// Raw is a raw representation of the SCION (data-plane) path type. It is designed to parse as
// little as possible and should be used if performance matters.
type Raw struct {
	// (lhalm) named the composite structure beacause composition does not seem to be supported
	BaseEmbedded Base // Base
	Raw []byte
}

// (lhalm) function added as a workaround because interface composition does not seem to be supported yet
func (s *Raw) Len() int {
	return s.BaseEmbedded.Len()
}

// DecodeFromBytes only decodes the PathMetaHeader. Otherwise the nothing is decoded and simply kept
// as raw bytes.
func (s *Raw) DecodeFromBytes(data []byte) error {
// 	if err := s.Base.DecodeFromBytes(data); err != nil {
// 		return err
// 	}
// 	pathLen := s.Len()
// 	if len(data) < pathLen {
// 		return serrors.New("RawPath raw too short", "expected", pathLen, "actual", len(data))
// 	}
// 	s.Raw = data[:pathLen]
// 	return nil
}

// SerializeTo writes the path to a slice. The slice must be big enough to hold the entire data,
// otherwise an error is returned.
func (s *Raw) SerializeTo(b []byte) error {
// 	if s.Raw == nil {
// 		return serrors.New("raw is nil")
// 	}
// 	if minLen := s.Len(); len(b) < minLen {
// 		return serrors.New("buffer too small", "expected", minLen, "actual", len(b))
// 	}
// 	// XXX(roosd): This modifies the underlying buffer. Consider writing to data
// 	// directly.
// 	if err := s.PathMeta.SerializeTo((s.Raw)[:MetaLen]); err != nil {
// 		return err
// 	}
// 	copy(b, s.Raw)
// 	return nil
}

// Reverse reverses the path such that it can be used in the reverse direction.
func (s *Raw) Reverse() error {
// 	// XXX(shitz): The current implementation is not the most performant, since it parses the entire
// 	// path first. If this becomes a performance bottleneck, the implementation should be changed to
// 	// work directly on the raw representation.

// 	decoded, err := s.ToDecoded()
// 	if err != nil {
// 		return err
// 	}
// 	if err := decoded.Reverse(); err != nil {
// 		return err
// 	}
// 	if err := decoded.SerializeTo(s.Raw); err != nil {
// 		return err
// 	}
// 	return s.DecodeFromBytes(s.Raw)
}

// ToDecoded transforms a scion.Raw to a scion.Decoded.
// func (s *Raw) ToDecoded() (*Decoded, error) {
// 	// Serialize PathMeta to ensure potential changes are reflected Raw.
// 	if err := s.PathMeta.SerializeTo((s.Raw)[:MetaLen]); err != nil {
// 		return nil, err
// 	}
// 	decoded := &Decoded{}
// 	if err := decoded.DecodeFromBytes(s.Raw); err != nil {
// 		return nil, err
// 	}
// 	return decoded, nil
// }

pred infoFieldAcc(s *Raw, idx int) {
	acc(s, 1/4) &&
	idx >= 0 &&
	(MetaLen + idx*path.InfoLen)+path.InfoLen < len(s.Raw) &&
	forall i int :: 0 <= i && i < len(s.Raw) ==> acc(&(s.Raw)[i], 1/4)
}

// GetInfoField returns the InfoField at a given index.
requires infoFieldAcc(s, idx)
ensures infoFieldAcc(s, idx)
func (s *Raw) GetInfoField(idx int) (*path.InfoField, error) {
	unfold infoFieldAcc(s, idx)
	if idx >= s.BaseEmbedded.NumINF {
		// (lhalm) create error first to allow folding of the predicate
		err := serrors.New("InfoField index out of bounds", "max", s.BaseEmbedded.NumINF-1, "actual", idx)
		fold infoFieldAcc(s, idx)
		return nil, err
		//return nil, serrors.New("InfoField index out of bounds", "max", s.BaseEmbedded.NumINF-1, "actual", idx)
	}
	infOffset := MetaLen + idx*path.InfoLen
	info := &path.InfoField{}
	// (lhalm) need to explicitly create the subslice and assert access permission
	// if err := info.DecodeFromBytes((s.Raw)[infOffset : infOffset+path.InfoLen]); err != nil {
	// 	return nil, err
	// }
	subslice := (s.Raw)[infOffset : infOffset+path.InfoLen]
	assert forall i int :: 0 <= i && i <= len(subslice) ==> &(s.Raw)[i + infOffset] == &subslice[i] && acc(&subslice[i], 1/4)
	if err := info.DecodeFromBytes(subslice); err != nil {
		fold infoFieldAcc(s, idx)
		return nil, err
	}
	fold infoFieldAcc(s, idx)
	return info, nil
}

// GetCurrentInfoField is a convenience method that returns the current hop field pointed to by the
// CurrINF index in the path meta header.
requires acc(s, 1/2)
requires infoFieldAcc(s, int(s.BaseEmbedded.PathMeta.CurrINF))
ensures acc(s, 1/2)
ensures infoFieldAcc(s, int(s.BaseEmbedded.PathMeta.CurrINF))
func (s *Raw) GetCurrentInfoField() (*path.InfoField, error) {
	return s.GetInfoField(int(s.BaseEmbedded.PathMeta.CurrINF))
}

// SetInfoField updates the InfoField at a given index.
func (s *Raw) SetInfoField(info *path.InfoField, idx int) error {
	// if idx >= s.BaseEmbedded.NumINF {
	// 	return serrors.New("InfoField index out of bounds", "max", s.BaseEmbedded.NumINF-1, "actual", idx)
	// }
	// if info == nil {
	// 	return serrors.New("Infofield cannot be nil")
	// }
	// infOffset := MetaLen + idx*path.InfoLen
	// return info.SerializeTo((s.Raw)[infOffset : infOffset+path.InfoLen])
}

pred hopFieldAcc(s *Raw, idx int) {
	acc(s, 1/4) &&
	(MetaLen + s.BaseEmbedded.NumINF*path.InfoLen + idx*path.HopLen) >= 0 &&
	(MetaLen + s.BaseEmbedded.NumINF*path.InfoLen + idx*path.HopLen) + path.HopLen < len(s.Raw) &&
	forall i int :: 0 <= i && i < len(s.Raw) ==> acc(&(s.Raw)[i], 1/4)
}

// GetHopField returns the HopField at a given index.
requires hopFieldAcc(s, idx)
ensures hopFieldAcc(s, idx)
ensures hf != nil ==> acc(hf)
//ensures err == nil ==> hf != nil // would like to have that, does not verify
func (s *Raw) GetHopField(idx int) (hf *path.HopField, err error) {
	unfold hopFieldAcc(s, idx)
	if idx >= s.BaseEmbedded.NumHops {
		// (lhalm) create error first to allow folding of the predicate
		err := serrors.New("HopField index out of bounds", "max", s.BaseEmbedded.NumHops-1, "actual", idx)
		fold hopFieldAcc(s, idx)
		return nil, err
		//return nil, serrors.New("HopField index out of bounds", "max", s.BaseEmbedded.NumHops-1, "actual", idx)
	}
	hopOffset := MetaLen + s.BaseEmbedded.NumINF*path.InfoLen + idx*path.HopLen
	hop := &path.HopField{}
	// (lhalm) need to explicitly create the subslice and assert access permission
	// if err := hop.DecodeFromBytes((s.Raw)[hopOffset : hopOffset+path.HopLen]); err != nil {
	// 	return nil, err
	// }
	subslice := (s.Raw)[hopOffset : hopOffset+path.HopLen]
	assert forall i int :: 0 <= i && i <= len(subslice) ==> &(s.Raw)[i + hopOffset] == &subslice[i] && acc(&subslice[i], 1/4)
	if err := hop.DecodeFromBytes(subslice); err != nil {
		fold hopFieldAcc(s, idx)
		return nil, err
	}
	fold hopFieldAcc(s, idx)
	return hop, nil
}

// GetCurrentHopField is a convenience method that returns the current hop field pointed to by the
// CurrHF index in the path meta header.
requires acc(s, 1/2)
requires hopFieldAcc(s, int(s.BaseEmbedded.PathMeta.CurrHF))
ensures acc(s, 1/2)
ensures hopFieldAcc(s, int(s.BaseEmbedded.PathMeta.CurrHF))
ensures hf != nil ==> acc(hf)
func (s *Raw) GetCurrentHopField() (hf *path.HopField, error) {
	return s.GetHopField(int(s.BaseEmbedded.PathMeta.CurrHF))
}

// SetHopField updates the HopField at a given index.
// func (s *Raw) SetHopField(hop *path.HopField, idx int) error {
// 	if idx >= s.NumHops {
// 		return serrors.New("HopField index out of bounds", "max", s.NumHops-1, "actual", idx)
// 	}
// 	if hop == nil {
// 		return serrors.New("Hopfield cannot be nil")
// 	}
// 	hopOffset := MetaLen + s.NumINF*path.InfoLen + idx*path.HopLen
// 	return hop.SerializeTo((s.Raw)[hopOffset : hopOffset+path.HopLen])
// }
