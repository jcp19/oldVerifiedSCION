// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package scion

import (
	"encoding/binary"
//	"fmt"

//	"github.com/scionproto/scion/go/lib/serrors"
	"gobra/lib/serrors"
//	"github.com/scionproto/scion/go/lib/slayers/path"
	"gobra/lib/slayers/path"
)

// MetaLen is the length of the PathMetaHeader.
const MetaLen = 4

// Base holds the basic information that is used by both raw and fully decoded paths.
type Base struct {
	// PathMeta is the SCION path meta header. It is always instantiated when
	// decoding a path from bytes.
	PathMeta MetaHdr
	// NumINF is the number of InfoFields in the path.
	NumINF int
	// NumHops is the number HopFields in the path.
	NumHops int
}

pred BaseInvariant(b *Base) {
	acc(b) &&
	// 3 is the value of MaxINFs and 64 is the number of MaxHops. Even though they are
	// defined in this package, using their actual values allows one to verify files
	// independently
	b.NumINF >= 0 && b.NumINF <= 3 &&
	// (joao) the code cannot establish this invariant yet
	b.NumHops >= 0 && // && b.NumHops <= 64
	(b.NumINF > 0 ==> b.NumHops > 0) &&
	// (tlino) CurrINF and CurrHF refer to the current info/hop fields
	(b.NumINF == 0 ==> b.PathMeta.CurrINF == 0) &&
	(b.NumINF > 0 ==> b.PathMeta.CurrINF >= 0  && b.PathMeta.CurrINF < b.NumINF) &&
	(b.NumHops == 0 ==> b.PathMeta.CurrHF == 0) &&
	(b.NumHops > 0 ==> b.PathMeta.CurrHF >= 0  && b.PathMeta.CurrHF < b.NumHops)
}

requires acc(s)
preserves forall i int :: 0 <= i && i < len(data) ==> acc(&data[i], 1/100)
ensures res != nil ==> acc(s)
ensures res == nil ==> BaseInvariant(s)
decreases
func (s *Base) DecodeFromBytes(data []byte) (res error) {
	// PathMeta takes care of bounds check.
	err := s.PathMeta.DecodeFromBytes(data)
	if err != nil {
		return err
	}
	s.NumINF = 0
	s.NumHops = 0

	invariant -1 <= i && i <= 2
	invariant acc(&s.PathMeta.SegLen)
	invariant acc(&s.NumHops)
	invariant acc(&s.NumINF)
	invariant s.NumHops >= 0 && s.NumINF >= 0 && s.NumINF <= 3 // && s.NumHops <= 64
	decreases i
	for i := 2; i >= 0; i-- {
// (joao) added paretheses surrounding `s.PathMeta.SegLen`
		if (s.PathMeta.SegLen)[i] == 0 && s.NumINF > 0 {
// (joao) introduced dummy return error becase fmt is not supported
//			return serrors.New(
//				fmt.Sprintf("Meta.SegLen[%d] == 0, but Meta.SegLen[%d] > 0", i, s.NumINF-1))
			return serrors.New("")
		}
// (joao) added paretheses surrounding `s.PathMeta.SegLen`
		if (s.PathMeta.SegLen)[i] > 0 && s.NumINF == 0 {
			s.NumINF = i + 1
		}
// (joao) added paretheses surrounding `s.PathMeta.SegLen`
// (joao) the conversion below should always yield a non-negative value, but Gobra cannot prove it
		assume int((s.PathMeta.SegLen)[i]) >= 0
		s.NumHops += int((s.PathMeta.SegLen)[i])
	}

	// (tlino) introduce these assumptions
	assume s.PathMeta.CurrINF < s.NumINF
	assume s.PathMeta.CurrHF < s.NumHops

	fold BaseInvariant(s)
	return nil
}

// IncPath increases the currHF index and currINF index if appropriate.
requires BaseInvariant(s)
ensures BaseInvariant(s)
ensures s.Len() == old(s.Len())
decreases
func (s *Base) IncPath() (err error) {
	unfold BaseInvariant(s)
	if s.NumINF == 0 {
		fold BaseInvariant(s)
		return serrors.New("empty path cannot be increased")
	}
	if int(s.PathMeta.CurrHF) >= s.NumHops-1 {
		s.PathMeta.CurrHF = uint8(s.NumHops - 1)
		fold BaseInvariant(s)
		return serrors.New("path already at end")
	}
	s.PathMeta.CurrHF++
	// Update CurrINF
	s.PathMeta.CurrINF = s.infIndexForHF(s.PathMeta.CurrHF)
	fold BaseInvariant(s)
	return nil
}

// IsXover returns whether we are at a crossover point.
preserves acc(BaseInvariant(s), 1/100)
decreases
func (s *Base) IsXover() bool {
// (joao) tmp was introduced by me to simplify the unfoldings of BaseInvariant(s)
	unfold acc(BaseInvariant(s), 1/100)
	tmp := s.PathMeta.CurrINF != s.infIndexForHF(s.PathMeta.CurrHF+1)
	fold acc(BaseInvariant(s), 1/100)
	return tmp
}

// (joao) introduced to reduce verification time, as suggested in 
// https://ethz.ch/content/dam/ethz/special-interest/infk/chair-program-method/pm/documents/Education/Theses/Sascha_Forster_BA_report(3).pdf
requires acc(BaseInvariant(s), _)
ensures res >= 0 && res <= 3
decreases
pure func getNumINF(s *Base) (res int) {
	return unfolding acc(BaseInvariant(s), _) in s.NumINF
}

// (joao) introduced to reduce verification time
requires acc(BaseInvariant(s), _)
ensures res >= 0
decreases
pure func getNumHops(s *Base) (res int) {
	return unfolding acc(BaseInvariant(s), _) in s.NumHops
}

// (joao) introduced to reduce verification time
requires acc(BaseInvariant(s), _)
ensures res >= 0
decreases
pure func getCurrHF(s *Base) (res uint8) {
	return unfolding acc(BaseInvariant(s), _) in s.PathMeta.CurrHF
}

// (tlino) introduced to reduce verification time
requires acc(BaseInvariant(s), _)
ensures res >= 0
decreases
pure func getCurrINF(s *Base) (res uint8) {
	return unfolding acc(BaseInvariant(s), _) in s.PathMeta.CurrINF
}

// (joao) spec in terms of implementation details not problematic because it is not exported
// requires acc(BaseInvariant(s), p)
// ensures acc(BaseInvariant(s), p)
preserves acc(s, 1/1000) && s.NumINF >= 0 && s.NumINF <= 3 && s.NumHops >= 0
ensures s.NumINF > 0 ==> (res >= 0 && res < s.NumINF)
decreases
func (s *Base) infIndexForHF(hf uint8) (res uint8) {
	left := uint8(0)

	invariant acc(s, 1/1000) && s.NumINF >= 0 && s.NumINF <= 3 && s.NumHops >= 0
	invariant 0 <= i && i <= 3
	decreases s.NumINF-i
	for i := 0; i < s.NumINF; i++ {
		if hf >= left {
// (joao) added paretheses surrounding `s.PathMeta.SegLen`
			if hf < left+(s.PathMeta.SegLen)[i] {
				return uint8(i)
			}
		}
// (joao) added paretheses surrounding `s.PathMeta.SegLen`
		left += (s.PathMeta.SegLen)[i]
	}
	// at the end we just return the last index.
// (joao) the RHS of the following declaration used to be in the return statement
	return uint8(s.NumINF - 1)
}

// Len returns the length of the path in bytes.
requires acc(BaseInvariant(s), _)
// (joao) Gobra cannot prove that int(s.NumINF) and int(s.NumHops) are positive, thus the body is omitted to ensure
// this property
ensures res >= MetaLen
ensures res == unfolding acc(BaseInvariant(s), _) in MetaLen + int(s.NumINF)*path.InfoLen + int(s.NumHops)*path.HopLen
decreases
pure func (s *Base) Len() (res int) // {
//	return unfolding acc(BaseInvariant(s), _) in MetaLen + int(s.NumINF)*path.InfoLen + int(s.NumHops)*path.HopLen
// }

// MetaHdr is the PathMetaHdr of a SCION (data-plane) path type.
type MetaHdr struct {
	// (joao) Currently, there are no restrictions on the value CurrINF and CurrHF may hold.
	// In particular, they do not need to be valid indexes
	CurrINF uint8
	CurrHF  uint8
	SegLen  [3]uint8
}

// DecodeFromBytes populates the fields from a raw buffer. The buffer must be of length >=
// scion.MetaLen
requires acc(m)
requires forall i int :: 0 <= i && i < len(raw) ==> acc(&raw[i], 1/100)
ensures acc(m)
ensures forall i int :: 0 <= i && i < len(raw) ==> acc(&raw[i], 1/100)
ensures err == nil ==> (m.CurrINF >= 0 &&  m.CurrHF >= 0)
decreases
func (m *MetaHdr) DecodeFromBytes(raw []byte) (err error) {
	if len(raw) < MetaLen {
		return serrors.New("MetaHdr raw too short", "expected", MetaLen, "actual", len(raw))
	}
	line := binary.BigEndian.Uint32(raw)
	m.CurrINF = uint8(line >> 30)
	m.CurrHF = uint8(line>>24) & 0x3F
	// (tlino) Assertions of m.CurrINF and m.CurrHF are always non-negative.
	// (tlino) However, Gobra cannot prove this yet.
	// (tlino) Thus, we can use these assumptions
	assume m.CurrINF >= 0
	assume m.CurrHF >= 0
// (joao) introduced parentheses surrounding `m.SegLen`
	(m.SegLen)[0] = uint8(line>>12) & 0x3F
	(m.SegLen)[1] = uint8(line>>6) & 0x3F
	(m.SegLen)[2] = uint8(line) & 0x3F

	return nil
}

// SerializeTo writes the fields into the provided buffer. The buffer must be of length >=
// scion.MetaLen
preserves acc(m, 1/200)
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
ensures len(b) >= MetaLen ==> res == nil
ensures len(b) < MetaLen ==> res != nil
decreases
func (m *MetaHdr) SerializeTo(b []byte) (res error) {
	if len(b) < MetaLen {
		return serrors.New("buffer for MetaHdr too short", "expected", MetaLen, "actual", len(b))
	}
	line := uint32(m.CurrINF)<<30 | uint32(m.CurrHF&0x3F)<<24
// (joao) introduced parentheses surrounding `m.SegLen`
	line |= uint32((m.SegLen)[0]&0x3F) << 12
	line |= uint32((m.SegLen)[1]&0x3F) << 6
	line |= uint32((m.SegLen)[2] & 0x3F)
	binary.BigEndian.PutUint32(b, line)

	return nil
}

// (joao) introduced this method to decrease verification time when calling SerializeTo
//        from a context with s.BaseInvariant()
preserves acc(BaseInvariant(s), 1/100)
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
ensures len(b) >= MetaLen ==> res == nil
ensures len(b) < MetaLen ==> res != nil
decreases
func (s *Base) SerializePathMetaTo(b []byte) (res error) {
	unfold acc(BaseInvariant(s), 1/100)
	res = s.PathMeta.SerializeTo(b)
	fold acc(BaseInvariant(s), 1/100)
	return res
}

// (joao) fmt still not supported
func (m MetaHdr) String() string // {
//	return fmt.Sprintf("{CurrInf: %d, CurrHF: %d, SegLen: %v}", m.CurrINF, m.CurrHF, m.SegLen)
// }
