// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package scion

import (
//	"github.com/scionproto/scion/go/lib/serrors"
	"gobra/lib/serrors"
//	"github.com/scionproto/scion/go/lib/slayers/path"
	"gobra/lib/slayers/path"
)

const (
	// MaxINFs is the maximum number of info fields in a SCION path.
	MaxINFs = 3
	// MaxHops is the maximum number of hop fields in a SCION path.
	MaxHops = 64
)

pred DecodedInvariant(d* Decoded) {
	acc(d) &&
	BaseInvariant(&d.Base) &&
	(unfolding BaseInvariant(&d.Base) in (d.NumINF <= MaxINFs && len(d.InfoFields) == d.NumINF)) &&
	(unfolding BaseInvariant(&d.Base) in (d.NumHops <= MaxHops && len(d.HopFields) == d.NumHops)) &&
	(forall i int :: 0 <= i && i < len(d.InfoFields) ==> acc(&(d.InfoFields)[i])) &&
	(forall i int :: 0 <= i && i < len(d.HopFields) ==> acc(&(d.HopFields)[i]))
}

// Decoded implements the SCION (data-plane) path type. Decoded is intended to be used in
// non-performance critical code paths, where the convenience of having a fully parsed path trumps
// the loss of performance.
type Decoded struct {
	Base
	// InfoFields contains all the InfoFields of the path.
	InfoFields []*path.InfoField
	// HopFields contains all the HopFields of the path.
	HopFields []*path.HopField
}

// DecodeFromBytes fully decodes the SCION path into the corresponding fields.
//requires p > 0
//requires DecodedInvariant(s)
//requires unfolding DecodedInvariant(s) in unfolding BaseInvariant(&s.Base) in MetaLen + int(s.NumINF) * path.InfoLen + int(path.HopLen) * s.NumHops <= len(data) && 6 + path.MacLen <= len(data)
//requires forall i int :: 0 <= i && i < len(data) ==> acc(&data[i], p)
//// ensures DecodedInvariant(s)
//ensures forall i int :: 0 <= i && i < len(data) ==> acc(&data[i], p)
//func (s *Decoded) DecodeFromBytes(data []byte, ghost p perm) error {
//	unfold DecodedInvariant(s)
//	unfold BaseInvariant(&s.Base)
//	if err := s.Base.DecodeFromBytes(data, p/2); err != nil {
//		return err
//	}
//	if minLen := s.Len(); len(data) < minLen {
//		return serrors.New("DecodedPath raw too short", "expected", minLen, "actual", len(data))
//	}
//
//	offset := MetaLen
//	s.InfoFields = make([]*path.InfoField, s.NumINF)
//
//	invariant acc(s, 1/2)
//	invariant len(s.InfoFields) == s.NumINF
//	invariant 0 <= i && i <= int(s.NumINF)
//	// invariant MetaLen + int(s.NumINF) * path.InfoLen + int(path.HopLen) * s.NumHops <= len(data)
//	invariant MetaLen + int(s.NumINF) * path.InfoLen <= len(data)
//	invariant offset == MetaLen + i * path.InfoLen
//	invariant forall i int :: 0 <= i && i < len(data) ==> acc(&data[i], p)
//	invariant forall j int :: 0 <= j && j < len(s.InfoFields) ==> acc(&(s.InfoFields)[j])
//	for i := 0; i < int(s.NumINF); i++ {
//		info := &path.InfoField{}
//		assert forall j int :: 0 <= j && j < path.InfoLen ==> &data[offset : offset+path.InfoLen][j] == &data[offset + j]
//		if err := info.DecodeFromBytes(data[offset : offset+path.InfoLen], p/2); err != nil {
//			return err
//		}
//		// (joao) add parentheses surrounding s.InfoFields
//		(s.InfoFields)[i] = info
//		offset += path.InfoLen
//	}
//	s.HopFields = make([]*path.HopField, s.NumHops)
// (joao) current progress until here
//	invariant acc(s, 1/2)
//	invariant 0 <= i && i <= int(s.NumHops)
//	invariant len(s.HopFields) == s.NumHops
//	invariant 6 + path.MacLen <= len(data)
//	invariant MetaLen + int(s.NumINF) * path.InfoLen + int(path.HopLen) * s.NumHops <= len(data)
//	invariant offset == MetaLen + int(s.NumINF) * path.InfoLen + i * path.HopLen
//	invariant forall i int :: 0 <= i && i < len(data) ==> acc(&data[i], p)
//	invariant forall j int :: 0 <= j && j < len(s.HopFields) ==> acc(&(s.HopFields)[j])
//	for i := 0; i < int(s.NumHops); i++ {
//		hop := &path.HopField{}
//		assert forall j int :: 0 <= j && j < int(path.HopLen) ==> &(data[offset : offset+path.HopLen][j]) == &data[offset + j]
//		if err := hop.DecodeFromBytes(data[offset : offset+path.HopLen], p/2); err != nil {
//			return err
//		}
		// (joao) add parentheses surrounding s.HopFields
//		(s.HopFields)[i] = hop
//		offset += path.HopLen
//	}
//	fold BaseInvariant(&s.Base)
//	fold DecodedInvariant(s)
//	return nil
//}

// SerializeTo writes the path to a slice. The slice must be big enough to hold the entire data,
// otherwise an error is returned.
//requires acc(DecodedInvariant(s))
//func (s *Decoded) SerializeTo(b []byte) error {
//	unfold DecodedInvariant(s)
//	unfold BaseInvariant(&s.Base)
//	if len(b) < s.Len() {
//		return serrors.New("buffer too small to serialize path.", "expected", s.Len(),
//			"actual", len(b))
//	}
//	if err := s.PathMeta.SerializeTo(b[:MetaLen]); err != nil {
//		return err
//	}
//	offset := MetaLen
//	for _, info := range s.InfoFields {
//		if err := info.SerializeTo(b[offset : offset+path.InfoLen]); err != nil {
//			return err
//		}
//		offset += path.InfoLen
//	}
//	for _, hop := range s.HopFields {
//		if err := hop.SerializeTo(b[offset : offset+path.HopLen]); err != nil {
//			return err
//		}
//		offset += path.HopLen
//	}
//	return nil
//}

// Reverse reverses a SCION path.
//func (s *Decoded) Reverse() error {
//	if s.NumINF == 0 {
//		// Empty path doesn't need reversal.
//		return nil
//	}
//	// Reverse order of InfoFields and SegLens
//	for i, j := 0, s.NumINF-1; i < j; i, j = i+1, j-1 {
//		s.InfoFields[i], s.InfoFields[j] = s.InfoFields[j], s.InfoFields[i]
//		s.PathMeta.SegLen[i], s.PathMeta.SegLen[j] = s.PathMeta.SegLen[j], s.PathMeta.SegLen[i]
//	}
//	// Reverse cons dir flags
//	for i := 0; i < s.NumINF; i++ {
//		info := s.InfoFields[i]
//		info.ConsDir = !info.ConsDir
//	}
//	// Reverse order of hop fields
//	for i, j := 0, s.NumHops-1; i < j; i, j = i+1, j-1 {
//		s.HopFields[i], s.HopFields[j] = s.HopFields[j], s.HopFields[i]
//	}
//	// Update CurrINF and CurrHF and SegLens
//	s.PathMeta.CurrINF = uint8(s.NumINF) - s.PathMeta.CurrINF - 1
//	s.PathMeta.CurrHF = uint8(s.NumHops) - s.PathMeta.CurrHF - 1
//
//	return nil
//}

// ToRaw tranforms scion.Decoded into scion.Raw
//func (s *Decoded) ToRaw() (*Raw, error) {
//	b := make([]byte, s.Len())
//	if err := s.SerializeTo(b); err != nil {
//		return nil, err
//	}
//	raw := &Raw{}
//	if err := raw.DecodeFromBytes(b); err != nil {
//		return nil, err
//	}
//	return raw, nil
//}