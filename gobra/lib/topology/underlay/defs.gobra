// Copyright 2017 ETH Zurich
// Copyright 2020 ETH Zurich, Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package underlay

import (
	// "encoding/json"
	// "fmt"
	"strings"

	"gobra/lib/common"
)

type Type int

// (tlino) globals not supported by gobra use functions instead
// const (
// 	Invalid Type = iota
// 	UDPIPv4
// 	UDPIPv6
// 	UDPIPv46
// )

// const (
// 	UDPIPv4Name  = "UDP/IPv4"
// 	UDPIPv6Name  = "UDP/IPv6"
// 	UDPIPv46Name = "UDP/IPv4+6"
// )

pure func Invalid() Type {
    return 0
}

pure func UDPIPv4() Type {
    return 1
}

pure func UDPIPv6() Type {
    return 2
}

pure func UDPIPv46() Type {
    return 3
}

pure func UDPIPv4Name() string {
    return "UDP/IPv4"
}

pure func UDPIPv6Name() string {
    return "UDP/IPv6"
}

pure func UDPIPv46Name() string {
    return "UDP/IPv4+6"
}


// (tlino) globals not supported by gobra use functions instead
// const (
// 	// EndhostPort is the underlay port that the dispatcher binds to on non-routers. Subject to
// 	// change during standardisation.
// 	EndhostPort = 30041
// )

pure func EndhostPort() int {
    return 30041
}

// (tlino) TODO need support for fmt
func (o Type) String() string //{
// 	switch o {
// 	case UDPIPv4:
// 		return UDPIPv4Name
// 	case UDPIPv6:
// 		return UDPIPv6Name
// 	case UDPIPv46:
// 		return UDPIPv46Name
// 	default:
// 		return fmt.Sprintf("UNKNOWN (%d)", o)
// 	}
// }

// (tlino) TODO common.NewBasicError doesn't work yet
func TypeFromString(s string) (Type, error) {
	switch strings.ToLower(s) {
	case strings.ToLower(UDPIPv4Name()):
        // (tlino) globals not supported
		// return UDPIPv4, nil
        return UDPIPv4(), nil
	case strings.ToLower(UDPIPv6Name()):
        // (tlino) globals not supported
		// return UDPIPv6, nil
        return UDPIPv6(), nil
	case strings.ToLower(UDPIPv46Name()):
        // (tlino) globals not supported
		// return UDPIPv46, nil
        return UDPIPv46(), nil
	default:
        // (tlino) globals not supported
		// return Invalid, common.NewBasicError("Unknown underlay type", nil, "type", s)
        return Invalid(), common.NewBasicError(common.ErrMsg("Unknown underlay type"), nil, "type", s)
	}
}

// (tlino) TODO add support for encoding/json
func (ot *Type) UnmarshalJSON(data []byte) error // {
// 	var strVal string
// 	if err := json.Unmarshal(data, &strVal); err != nil {
// 		return err
// 	}
// 	t, err := TypeFromString(strVal)
// 	if err != nil {
// 		return err
// 	}
// 	*ot = t
// 	return nil
// }

// (tlino) TODO add support for encoding/json
func (ot Type) MarshalJSON() ([]byte, error) //{
// 	return json.Marshal(ot.String())
// }

func (ot Type) IsUDP() bool {
	switch ot {
    // (tlino) no support for globals
    // case UDPIPv4, UDPIPv6, UDPIPv46:
	case UDPIPv4(), UDPIPv6(), UDPIPv46():
		return true
	}
	return false
}
