// Copyright 2017 ETH Zurich
// Copyright 2020 ETH Zurich, Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package underlay

import (
	// "encoding/json"
	// "fmt"
	"strings"

	"gobra/lib/common"
)

type Type int

// (tlino) iota not supported by gobra
// const (
// 	Invalid Type = iota
// 	UDPIPv4
// 	UDPIPv6
// 	UDPIPv46
// )

// (tlino) explicit constant definitions without iota
const (
	Invalid Type = 0
	UDPIPv4 Type = 1
	UDPIPv6 Type = 2
	UDPIPv46 Type = 3
)

const (
	UDPIPv4Name  = "UDP/IPv4"
	UDPIPv6Name  = "UDP/IPv6"
	UDPIPv46Name = "UDP/IPv4+6"
)

const (
	// EndhostPort is the underlay port that the dispatcher binds to on non-routers. Subject to
	// change during standardisation.
	EndhostPort = 30041
)

// (tlino) TODO need support for fmt
func (o Type) String() string //{
// 	switch o {
// 	case UDPIPv4:
// 		return UDPIPv4Name
// 	case UDPIPv6:
// 		return UDPIPv6Name
// 	case UDPIPv46:
// 		return UDPIPv46Name
// 	default:
// 		return fmt.Sprintf("UNKNOWN (%d)", o)
// 	}
// }

// (tlino) Verified
// (tlino) TODO common.NewBasicError doesn't work yet
func TypeFromString(s string) (Type, error) {
	switch strings.ToLower(s) {
	case strings.ToLower(UDPIPv4Name):
		return UDPIPv4, nil
	case strings.ToLower(UDPIPv6Name):
		return UDPIPv6, nil
	case strings.ToLower(UDPIPv46Name):
		return UDPIPv46, nil
	default:
		// (tlino) use common.ErrMsg, since the string argument isn't supported directly
		// return Invalid, common.NewBasicError("Unknown underlay type", nil, "type", s)
        return Invalid, common.NewBasicError(common.ErrMsg("Unknown underlay type"), nil, "type", s)
	}
}

// (tlino) TODO add support for encoding/json
preserves acc(ot)
preserves forall i int :: 0 <= i && i < len(data) ==> acc(&data[i], 1/1000)
func (ot *Type) UnmarshalJSON(data []byte) error // {
// 	var strVal string
// 	if err := json.Unmarshal(data, &strVal); err != nil {
// 		return err
// 	}
// 	t, err := TypeFromString(strVal)
// 	if err != nil {
// 		return err
// 	}
// 	*ot = t
// 	return nil
// }

// (tlino) TODO add support for encoding/json
ensures forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
func (ot Type) MarshalJSON() (b []byte, error) //{
// 	return json.Marshal(ot.String())
// }

// (tlino) Verified
func (ot Type) IsUDP() bool {
	switch ot {
	case UDPIPv4, UDPIPv6, UDPIPv46:
		return true
	}
	return false
}
