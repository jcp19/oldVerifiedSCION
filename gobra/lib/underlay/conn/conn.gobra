// Copyright 2017 ETH Zurich
// Copyright 2020 ETH Zurich, Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +build go1.9,linux

// Package conn implements underlay sockets with additional metadata on reads.
package conn

import (
//	"flag"
	"net"
//	"syscall"
	"time"
//	"unsafe"

//	"golang.org/x/net/ipv4"
	"gobra/dependencies/x/net/ipv4"
//	"golang.org/x/net/ipv6"
	"gobra/dependencies/x/net/ipv6"

//	"github.com/scionproto/scion/go/lib/common"
	"gobra/lib/common"
//	"github.com/scionproto/scion/go/lib/log"
	"gobra/lib/serrors"
//	"github.com/scionproto/scion/go/lib/sockctrl"
//	"github.com/scionproto/scion/go/lib/topology/underlay"
	"gobra/lib/topology/underlay"
)

// ReceiveBufferSize is the default size, in bytes, of receive buffers for
// opened sockets.
const ReceiveBufferSize = 1 << 20

const sizeOfRxqOvfl = 4 // Defined to be uint32
// const sizeOfTimespec = int(unsafe.Sizeof(syscall.Timespec{}))

//var oobSize = syscall.CmsgSpace(sizeOfRxqOvfl) + syscall.CmsgSpace(sizeOfTimespec)
//var sizeIgnore = flag.Bool("overlay.conn.sizeIgnore", true,
//	"Ignore failing to set the receive buffer size on a socket.")

// Messages is a list of ipX.Messages. It is necessary to hide the type alias
// between ipv4.Message, ipv6.Message and socket.Message.
type Messages []ipv4.Message

pred (m Messages) Mem() {
	forall i int :: 0 <= i && i < len(m) ==> (&m[i]).Mem()
}

// Conn describes the API for an underlay socket with additional metadata on
// reads.
type Conn interface {
	pred Mem()

	// (tlino) Reads a message and copies the payload into b.
	// (tlino) Reads the number of read bytes n and the metadata
	preserves Mem()
	preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
	ensures err == nil ==> 0 <= n && n <= len(b)
	ensures r.Mem()
	Read(b common.RawBytes) (n int, r *ReadMeta, err error)

	// (tlino) Reads a batch of messages and stores them in msgs.
	// (tlino) The metadata is stored in metas.
	// (tlino) Returns the number of read messages
	preserves Mem()
	preserves msgs.Mem()
	preserves ReadMetasAcc(metas)
	ensures err == nil ==> 0 <= n && n <= len(msgs) && n <= len(metas)
	ReadBatch(msgs Messages, metas []ReadMeta) (n int, err error)

	// (tlino) Writes the bytes in b to the receiver
	preserves Mem()
	preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
	Write(b common.RawBytes) (n int, err error)

	// (tlino) Writes bytes in b to dst
	preserves Mem()
	preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
	preserves acc(dst.Mem(), 1/1000)
	WriteTo(b common.RawBytes, dst *net.UDPAddr) (int, error)

	// (tlino) Writes a batch of messages
	// (tlino) Returns the number of written messages
	preserves Mem()
	preserves acc(msgs.Mem(), 1/1000)
	ensures err == nil ==> 0 <= n && n <= len(msgs)
	WriteBatch(msgs Messages) (n int, err error)

	// (tlino) Returns local address
	// (tlino) TODO: will change in the future to something like:
	// (tlino) requires Mem()
	// (tlino) ensures acc(ret.Mem(), 1/1000) && acc(ret.Mem(), 1/1000) --* Mem()
	preserves Mem()
	LocalAddr() *net.UDPAddr

	// (tlino) Returns remote address
	// (tlino) TODO: will change in the future to something like:
	// (tlino) requires Mem()
	// (tlino) ensures acc(ret.Mem(), 1/1000) && acc(ret.Mem(), 1/1000) --* Mem()
	preserves Mem()
	RemoteAddr() *net.UDPAddr

	// (tlino) Sets the read deadline
	preserves Mem()
	SetReadDeadline(time.Time) error

	// (tlino) Sets the write deadline
	preserves Mem()
	SetWriteDeadline(time.Time) error

	// (tlino) sets the read and write deadlines 
	preserves Mem()
	SetDeadline(time.Time) error

	// (tlino) closes the connection
	preserves Mem()
	Close() error
}

// Config customizes the behavior of an underlay socket.
type Config struct {
	// ReceiveBufferSize is the size of the operating system receive buffer, in
	// bytes. If 0, the package constant is used instead.
	ReceiveBufferSize int
}

pred (c *Config) Mem() {
	acc(c)
}

// (tlino) Verified
preserves acc(c.Mem(), 1/1000)
func (c *Config) getReceiveBufferSize() int {
	unfold acc(c.Mem(), 1/1000)
	if c.ReceiveBufferSize != 0 {
		s := c.ReceiveBufferSize
		fold acc(c.Mem(), 1/1000)
		return s
	}
	fold acc(c.Mem(), 1/1000)
	return ReceiveBufferSize
}

// (tlino) Verified
// New opens a new underlay socket on the specified addresses.
//
// The config can be used to customize socket behavior. If config is nil,
// default values are used.
requires listen.Mem()
requires remote.Mem()
requires cfg.Mem()
ensures err == nil ==> c.Mem()
func New(listen, remote *net.UDPAddr, cfg *Config) (c Conn, err error) {
	unfold cfg.Mem()
	unfold listen.Mem()
	unfold remote.Mem()
	if cfg == nil {
		cfg = &Config{}
	}
	a := listen
	if remote != nil {
		a = remote
	}
	if listen == nil && remote == nil {
		fold cfg.Mem()
		fold listen.Mem()
		fold remote.Mem()
		panic("either listen or remote must be set")
	}
	if a.IP.To4() != nil {
		fold cfg.Mem()
		fold listen.Mem()
		fold remote.Mem()
		return newConnUDPIPv4(listen, remote, cfg)
	}
	fold cfg.Mem()
	fold listen.Mem()
	fold remote.Mem()
	return newConnUDPIPv6(listen, remote, cfg)
}

type connUDPIPv4 struct {
	connUDPBase
	pconn *ipv4.PacketConn
}

pred (conn *connUDPIPv4) Mem() {
	(&conn.connUDPBase).Mem() && acc(&conn.pconn) && (&conn.pconn).Mem()
}

pred (conn *connUDPIPv4) MemWithOutpconn() {
	(&conn.connUDPBase).Mem() && acc(&conn.pconn)
}

// (tlino) TODO: add support for net.UDPConn.
// (tlino) Problem: property error: *UDPConn is not assignable to ipv4.PacketConn (cc.conn as argument in NewPacketConn)
// (tlino) Reason:  *UDPConn has no members with name SetWriteDeadline, SetDeadline, SetReadDeadline, LocalAddr, and Close
requires listen.Mem()
requires remote.Mem()
requires cfg.Mem()
ensures err == nil ==> conn.Mem() && conn != nil
func newConnUDPIPv4(listen, remote *net.UDPAddr, cfg *Config) (conn *connUDPIPv4, err error) //{
// 	cc := &connUDPIPv4{}
// 	if err := cc.initConnUDP("udp4", listen, remote, cfg); err != nil {
// 		return nil, err
// 	}
// 	cc.pconn = ipv4.NewPacketConn(cc.conn)
// 	return cc, nil
// }

// (tlino) TODO: add support for underlay, and syscall
// (tlino) Problem: got unknown identifier ReadBatch, syscall, syscall.MSG_WAITFORONE
// ReadBatch reads up to len(msgs) packets, and stores them in msgs, with their
// corresponding ReadMeta in metas. It returns the number of packets read, and an error if any.
preserves c.Mem()
preserves msgs.Mem()
preserves ReadMetasAcc(metas)
ensures err == nil ==> 0 <= n && n <= len(msgs) && n <= len(metas)
func (c *connUDPIPv4) ReadBatch(msgs Messages, metas []ReadMeta) (n int, err error) // {
// 	for i := range metas {
// 		metas[i].reset()
// 	}
// 	n, err := c.pconn.ReadBatch(msgs, syscall.MSG_WAITFORONE)
// 	readTime := time.Now()
// 	for i := 0; i < n; i++ {
// 		msg := msgs[i]
// 		meta := &metas[i]
// 		if msg.NN > 0 {
// 			c.handleCmsg((msg.OOB)[:msg.NN], meta, readTime)
// 		}
// 		meta.setSrc(c.Remote, (msg.Addr).(*net.UDPAddr), underlay.UDPIPv4)
// 	}
// 	return n, err
// }

// (tlino) Verified
preserves c.Mem()
preserves acc(msgs.Mem(), 1/1000)
ensures err == nil ==> 0 <= n && n <= len(msgs)
func (c *connUDPIPv4) WriteBatch(msgs Messages) (n int, err error) {
	unfold c.Mem()
	unfold acc(msgs.Mem(), 1/1000)
	n, err := c.pconn.WriteBatch(msgs, 0)
	fold acc(msgs.Mem(), 1/1000)
	fold c.Mem()
}

// (tlino) Verified
// SetReadDeadline sets the read deadline associated with the endpoint.
preserves c.Mem()
func (c *connUDPIPv4) SetReadDeadline(t time.Time) error {
	unfold c.Mem()
	err := c.pconn.SetReadDeadline(t)
	fold c.Mem()
}

// (tlino) Verified
preserves c.Mem()
func (c *connUDPIPv4) SetWriteDeadline(t time.Time) error {
	unfold c.Mem()
	err := c.pconn.SetWriteDeadline(t)
	fold c.Mem()
}

// (tlino) Verified
preserves c.Mem()
func (c *connUDPIPv4) SetDeadline(t time.Time) error {
	unfold c.Mem()
	err := c.pconn.SetDeadline(t)
	fold c.Mem()
}

type connUDPIPv6 struct {
	connUDPBase
	pconn *ipv6.PacketConn
}

pred (conn *connUDPIPv6) Mem() {
	(&conn.connUDPBase).Mem() && acc(&conn.pconn) && (&conn.pconn).Mem()
}

pred (conn *connUDPIPv6) MemWithOutpconn() {
	(&conn.connUDPBase).Mem() && acc(&conn.pconn)
}

// (tlino) TODO: add support for net.UDPConn.
// (tlino) Problem: property error: *UDPConn is not assignable to ipv6.PacketConn (cc.conn as argument in NewPacketConn)
// (tlino) Reason:  *UDPConn has no members with name SetWriteDeadline, SetDeadline, SetReadDeadline, LocalAddr, and Close
requires listen.Mem()
requires remote.Mem()
requires cfg.Mem()
ensures err == nil ==> conn.Mem() && conn != nil
func newConnUDPIPv6(listen, remote *net.UDPAddr, cfg *Config) (conn *connUDPIPv6, err error) //{
// 	cc := &connUDPIPv6{}
// 	if err := cc.initConnUDP("udp6", listen, remote, cfg); err != nil {
// 		return nil, err
// 	}
// 	cc.pconn = ipv6.NewPacketConn(cc.conn)
// 	return cc, nil
// }

// (tlino) TODO: add support for underlay, and syscall
// (tlino) Problem: got unknown identifier ReadBatch, syscall, syscall.MSG_WAITFORONE
// ReadBatch reads up to len(msgs) packets, and stores them in msgs, with their
// corresponding ReadMeta in metas. It returns the number of packets read, and an error if any.
preserves c.Mem()
preserves msgs.Mem()
preserves ReadMetasAcc(metas)
ensures err == nil ==> 0 <= n && n <= len(msgs) && n <= len(metas)
func (c *connUDPIPv6) ReadBatch(msgs Messages, metas []ReadMeta) (n int, err error) 
// {
// 	for i := range metas {
// 		metas[i].reset()
// 	}
// 	n, err := c.pconn.ReadBatch(msgs, syscall.MSG_WAITFORONE)
// 	readTime := time.Now()
// 	for i := 0; i < n; i++ {
// 		msg := msgs[i]
// 		meta := &metas[i]
// 		if msg.NN > 0 {
// 			c.handleCmsg(msg.OOB[:msg.NN], meta, readTime)
// 		}
// 		meta.setSrc(c.Remote, msg.Addr.(*net.UDPAddr), underlay.UDPIPv6)
// 	}
// 	return n, err
// }


// (tlino) Verified
preserves c.Mem()
preserves acc(msgs.Mem(), 1/1000)
ensures err == nil ==> 0 <= n && n <= len(msgs)
func (c *connUDPIPv6) WriteBatch(msgs Messages) (n int, err error) {
	unfold c.Mem()
	unfold acc(msgs.Mem(), 1/1000)
	n, err := c.pconn.WriteBatch(msgs, 0)
	fold c.Mem()
	fold acc(msgs.Mem(), 1/1000)
	return n, err
}

// (tlino) Verified
// SetReadDeadline sets the read deadline associated with the endpoint.
preserves c.Mem()
func (c *connUDPIPv6) SetReadDeadline(t time.Time) error {
	unfold c.Mem()
	err := c.pconn.SetReadDeadline(t)
	fold c.Mem()
	return err
}

// (tlino) Verified
preserves c.Mem()
func (c *connUDPIPv6) SetWriteDeadline(t time.Time) error {
	unfold c.Mem()
	err := c.pconn.SetWriteDeadline(t)
	fold c.Mem()
	return err
}

// (tlino) Verified
preserves c.Mem()
func (c *connUDPIPv6) SetDeadline(t time.Time) error {
	unfold c.Mem()
	err := c.pconn.SetDeadline(t)
	fold c.Mem()
	return err
}

type connUDPBase struct {
	conn     *net.UDPConn
	Listen   *net.UDPAddr
	Remote   *net.UDPAddr
	oob      common.RawBytes
	closed   bool
	readMeta ReadMeta
}

pred (conn *connUDPBase) Mem() {
	acc(conn) &&
	(forall i int :: 0 <= i && i < len(conn.oob) ==> acc(&(conn.oob)[i])) && 
	(&conn.readMeta).Mem()
}

// (tlino) TODO: add support for features of sockctrl, syscall, net
// (tlino) net: unknown identifier ListenUDP
// (tlino) sockctrl: unkonwn identifier SetsockoptInt, GetsockoptInt
// (tlino) syscall: unkonwn identifier SOL_SOCKET, SO_RXQ_OVFL, SO_TIMESTAMPNS, SO_RCVBUF
requires acc(cc)
requires laddr.Mem()
requires raddr.Mem()
requires cfg.Mem()
ensures  err == nil ==> cc.Mem()
ensures err != nil ==> acc(cc)
func (cc *connUDPBase) initConnUDP(network string, laddr, raddr *net.UDPAddr, cfg *Config) (err error) //{
// 	var c *net.UDPConn
// 	var err error
// 	if laddr == nil {
// 		return serrors.New("listen address must be specified")
// 	}
// 	if raddr == nil {
// 		if c, err = net.ListenUDP(network, laddr); err != nil {
// 			return common.NewBasicError("Error listening on socket", err,
// 				"network", network, "listen", laddr)
// 		}
// 	} else {
// 		if c, err = net.DialUDP(network, laddr, raddr); err != nil {
// 			return common.NewBasicError("Error setting up connection", err,
// 				"network", network, "listen", laddr, "remote", raddr)
// 		}
// 	}
// 	// Set reporting socket options
// 	if err := sockctrl.SetsockoptInt(c, syscall.SOL_SOCKET, syscall.SO_RXQ_OVFL, 1); err != nil {
// 		return common.NewBasicError("Error setting SO_RXQ_OVFL socket option", err,
// 			"listen", laddr, "remote", raddr)
// 	}
// 	if err := sockctrl.SetsockoptInt(c, syscall.SOL_SOCKET, syscall.SO_TIMESTAMPNS, 1); err != nil {
// 		return common.NewBasicError("Error setting SO_TIMESTAMPNS socket option", err,
// 			"listen", laddr, "remote", raddr)
// 	}
// 	// Set and confirm receive buffer size
// 	before, err := sockctrl.GetsockoptInt(c, syscall.SOL_SOCKET, syscall.SO_RCVBUF)
// 	if err != nil {
// 		return common.NewBasicError("Error getting SO_RCVBUF socket option (before)", err,
// 			"listen", laddr, "remote", raddr)
// 	}
// 	if err = c.SetReadBuffer(cfg.getReceiveBufferSize()); err != nil {
// 		return common.NewBasicError("Error setting recv buffer size", err,
// 			"listen", laddr, "remote", raddr)
// 	}
// 	after, err := sockctrl.GetsockoptInt(c, syscall.SOL_SOCKET, syscall.SO_RCVBUF)
// 	if err != nil {
// 		return common.NewBasicError("Error getting SO_RCVBUF socket option (after)", err,
// 			"listen", laddr, "remote", raddr)
// 	}
// 	if after/2 != ReceiveBufferSize {
// 		msg := "Receive buffer size smaller than requested"
// 		ctx := []interface{}{"expected", ReceiveBufferSize, "actual", after / 2,
// 			"before", before / 2}
// 		if !*sizeIgnore {
// 			return common.NewBasicError(common.ErrMsg(msg), nil, ctx...)
// 		}
// 		log.Info(msg, ctx...)
// 	}
// 	oob := make(common.RawBytes, oobSize)
// 	cc.conn = c
// 	cc.Listen = laddr
// 	cc.Remote = raddr
// 	cc.oob = oob
// 	return nil
// }

// (tlino) added method, since gobra doesn't support function promotion
requires acc(c)
requires laddr.Mem()
requires raddr.Mem()
requires cfg.Mem()
ensures err == nil ==> c.MemWithOutpconn()
ensures err != nil ==> acc(c)
func (c *connUDPIPv4) initConnUDP(network string, laddr, raddr *net.UDPAddr, cfg *Config) (err error) {
	err := c.connUDPBase.initConnUDP(network, laddr, raddr, cfg)
	if err == nil {
		fold c.MemWithOutpconn()
	}
	return err
}

// (tlino) added method, since gobra doesn't support function promotion
requires acc(c)
requires laddr.Mem()
requires raddr.Mem()
requires cfg.Mem()
ensures err == nil ==> c.MemWithOutpconn()
ensures err != nil ==> acc(c)
func (c *connUDPIPv6) initConnUDP(network string, laddr, raddr *net.UDPAddr, cfg *Config) (err error) {
	err := c.connUDPBase.initConnUDP(network, laddr, raddr, cfg)
	if err == nil {
		fold c.MemWithOutpconn()
	}
	return err
}

// (tlino) TODO: add support for ReadMsgUDP to net.UDPConn
// (tlino) Problem: unknown identifier ReadMsgUDP
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
ensures err == nil ==> 0 <= n && n <= len(b)
ensures r.Mem()
func (c *connUDPBase) Read(b common.RawBytes) (n int, r *ReadMeta, err error) //{
//	c.readMeta.reset()
//	n, oobn, _, src, err := c.conn.ReadMsgUDP(b, c.oob)
//	readTime := time.Now()
//	if oobn > 0 {
//		c.handleCmsg(c.oob[:oobn], &c.readMeta, readTime)
//	}
//	if c.Remote != nil {
//		c.readMeta.Src = c.Remote
//	} else if src != nil {
//		c.readMeta.Src = &net.UDPAddr{
//			IP:   src.IP,
//			Port: src.Port,
//			Zone: src.Zone,
//		}
//	}
//	return n, &c.readMeta, err
//}

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
<<<<<<< HEAD
ensures err == nil ==> 0 <= n && n <= len(b)
=======
ensures err == nil ==> 0 <= n && n < len(b)
>>>>>>> f8d063d94ab718c645a939f5c917d017c29bd641
ensures r.Mem()
func (c *connUDPIPv4) Read(b common.RawBytes) (n int, r *ReadMeta, err error) {
	unfold c.Mem()
	n, r, err := c.connUDPBase.Read(b)
	fold c.Mem()
}

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
ensures err == nil ==> 0 <= n && n <= len(b)
ensures r.Mem()
func (c *connUDPIPv6) Read(b common.RawBytes) (n int, r *ReadMeta, err error) {
	unfold c.Mem()
	n, r, err := c.connUDPBase.Read(b)
	fold c.Mem()
}

// (tlino) TODO add support for the syscall stuff
// (tlino) Problem: unkown identifiers SOL_SOCKET, SO_TIMESTAMPNS, Cmsghdr, SizeofCmsghdr, CmsgLen and many others
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(oob) ==> acc(&oob[i])
preserves meta.Mem()
func (c *connUDPBase) handleCmsg(oob common.RawBytes, meta *ReadMeta, readTime time.Time) //{
//	// Based on https://github.com/golang/go/blob/release-branch.go1.8/src/syscall/sockcmsg_unix.go#L49
//	// and modified to remove most allocations.
//	sizeofCmsgHdr := syscall.CmsgLen(0)
//	for sizeofCmsgHdr <= len(oob) {
//		hdr := (*syscall.Cmsghdr)(unsafe.Pointer(&oob[0]))
//		if hdr.Len < syscall.SizeofCmsghdr {
//			log.Error("Cmsg from ReadMsgUDP has corrupted header length", "listen", c.Listen,
//				"remote", c.Remote, "min", syscall.SizeofCmsghdr, "actual", hdr.Len)
//			return
//		}
//		if uint64(hdr.Len) > uint64(len(oob)) {
//			log.Error("Cmsg from ReadMsgUDP longer than remaining buffer",
//				"listen", c.Listen, "remote", c.Remote, "max", len(oob), "actual", hdr.Len)
//			return
//		}
//		switch {
//		case hdr.Level == syscall.SOL_SOCKET && hdr.Type == syscall.SO_RXQ_OVFL:
//			meta.RcvOvfl = *(*uint32)(unsafe.Pointer(&oob[sizeofCmsgHdr]))
//		case hdr.Level == syscall.SOL_SOCKET && hdr.Type == syscall.SO_TIMESTAMPNS:
//			tv := *(*syscall.Timespec)(unsafe.Pointer(&oob[sizeofCmsgHdr]))
//			meta.Recvd = time.Unix(int64(tv.Sec), int64(tv.Nsec))
//			meta.ReadDelay = readTime.Sub(meta.Recvd)
//			// Guard against leap-seconds.
//			if meta.ReadDelay < 0 {
//				meta.ReadDelay = 0
//			}
//		}
//		// What we actually want is the padded length of the cmsg, but CmsgLen
//		// adds a CmsgHdr length to the result, so we subtract that.
//		oob = oob[syscall.CmsgLen(int(hdr.Len))-sizeofCmsgHdr:]
//	}
//}

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(oob) ==> acc(&oob[i])
preserves meta.Mem()
func (c *connUDPIPv4) handleCmsg(oob common.RawBytes, meta *ReadMeta, readTime time.Time) {
	unfold c.Mem()
	c.connUDPBase.handleCmsg(oob, meta, readTime)
	fold c.Mem()
}

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(oob) ==> acc(&oob[i])
preserves meta.Mem()
func (c *connUDPIPv6) handleCmsg(oob common.RawBytes, meta *ReadMeta, readTime time.Time) {
	unfold c.Mem()
	c.connUDPBase.handleCmsg(oob, meta, readTime)
	fold c.Mem()
}

// (tlino) TODO: unkown identifier UDPConn.Write
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
func (c *connUDPBase) Write(b common.RawBytes) (int, error) //{
// 	return c.conn.Write(b)
// }

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
func (c *connUDPIPv4) Write(b common.RawBytes) (int, error) {
	unfold c.Mem()
	n, err := c.connUDPBase.Write(b)
	fold c.Mem()
	return n, err
}

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
func (c *connUDPIPv6) Write(b common.RawBytes) (int, error) {
	unfold c.Mem()
	n, err := c.connUDPBase.Write(b)
	fold c.Mem()
	return n, err
}

// (tlino) TODO: unkown identifier UDPConn.Write
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
preserves acc(dst.Mem(), 1/1000)
func (c *connUDPBase) WriteTo(b common.RawBytes, dst *net.UDPAddr) (n int, err error)
// {
// 	unfold c.Mem()
// 	if c.Remote != nil {
// 		n, err := c.conn.Write(b)
// 		fold c.Mem()
// 		return
// 	}
// 	n, err := c.conn.WriteTo(b, dst)
// 	fold c.Mem()
// 	return
// }

// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
preserves acc(dst.Mem(), 1/1000)
func (c *connUDPIPv4) WriteTo(b common.RawBytes, dst *net.UDPAddr) (n int, err error) {
	unfold c.Mem()
	n, err := c.connUDPBase.WriteTo(b, dst)
	fold c.Mem()
	return n, err
}

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
preserves acc(dst.Mem(), 1/1000)
func (c *connUDPIPv6) WriteTo(b common.RawBytes, dst *net.UDPAddr) (n int, err error) {
	unfold c.Mem()
	n, err := c.connUDPBase.WriteTo(b, dst)
	fold c.Mem()
	return n, err
}

// (tlino) Verified
preserves c.Mem()
func (c *connUDPBase) LocalAddr() *net.UDPAddr {
	unfold c.Mem()
	n := c.Listen
	fold c.Mem()
	return n
}

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
func (c *connUDPIPv4) LocalAddr() *net.UDPAddr {
	unfold c.Mem()
	n := c.connUDPBase.LocalAddr()
	fold c.Mem()
	return n
}

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
func (c *connUDPIPv6) LocalAddr() *net.UDPAddr {
	unfold c.Mem()
	n := c.connUDPBase.LocalAddr()
	fold c.Mem()
}

// (tlino) Verified
preserves c.Mem()
func (c *connUDPBase) RemoteAddr() *net.UDPAddr {
	unfold c.Mem()
	n := c.Remote
	fold c.Mem()
	return n
}

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
func (c *connUDPIPv4) RemoteAddr() *net.UDPAddr {
	unfold c.Mem()
	n := c.connUDPBase.RemoteAddr()
	fold c.Mem()
	return n
}

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
func (c *connUDPIPv6) RemoteAddr() *net.UDPAddr {
	unfold c.Mem()
	n := c.connUDPBase.RemoteAddr()
	fold c.Mem()
	return n
}

// (tlino) TODO: unkown identifier UDPConn.Close()
preserves c.Mem()
func (c *connUDPBase) Close() error //{
// 	if c.closed {
// 		return nil
// 	}
// 	c.closed = true
// 	// return c.conn.Close()
// }

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
func (c *connUDPIPv4) Close() error {
	unfold c.Mem()
	err := c.connUDPBase.Close()
	fold c.Mem()
	return err
}

// (tlino) Verified
// (tlino) added method, since gobra doesn't support function promotion
preserves c.Mem()
func (c *connUDPIPv6) Close() error {
	unfold c.Mem()
	err := c.connUDPBase.Close()
	fold c.Mem()
	return err
}

// ReadMeta contains extra information about socket reads.
type ReadMeta struct {
	// Src is the remote address from which the datagram was received
	Src *net.UDPAddr
	// Local is the address on which the datagram was received
	Local *net.UDPAddr
	// RcvOvfl is the total number of packets that were dropped by the OS due
	// to the receive buffers being full.
	RcvOvfl uint32
	// Recvd is the timestamp when the kernel placed the packet in the socket's
	// receive buffer. N.B. this is in system time, it is _not_ monotonic.
	Recvd time.Time
	// ReadDelay is the time elapsed between the kernel adding a packet to the
	// socket's receive buffer, and the application reading it from the Go
	// network stack (i.e., kernel to application latency).
	ReadDelay time.Duration
}

pred (r *ReadMeta) Mem() {
	acc(r) && (r.Src != nil ==> (&r.Src).Mem()) && (r.Local != nil ==> (&r.Local).Mem())
}

pred ReadMetasAcc(m []ReadMeta) {
	forall i int :: 0 <= i && i < len(m) ==> (&m[i]).Mem()
}

// (tlino) Verifed
preserves m.Mem()
func (m *ReadMeta) reset() {
	unfold m.Mem()
	m.Src = nil
	m.RcvOvfl = 0
	m.Recvd = time.Unix(0, 0)
	m.ReadDelay = 0
	fold m.Mem()
}

// (tlino) Verified
preserves m.Mem()
requires a != nil ==> a.Mem()
requires raddr.Mem()
func (m *ReadMeta) setSrc(a *net.UDPAddr, raddr *net.UDPAddr, ot underlay.Type) {
	unfold m.Mem()
	unfold raddr.Mem()
	if a != nil {
		unfold a.Mem()
		m.Src = a
	} else {
		m.Src = &net.UDPAddr{
			IP:   raddr.IP,
			Port: raddr.Port,
			Zone: raddr.Zone,
		}
	}
	fold (&m.Src).Mem()
	fold m.Mem()
}

// (tlino) TODO: m[i].Addr isn't assignable due to issue #341
// (tlino) First fix the issue: https://github.com/viperproject/gobra/issues/341
// (tlino) TODO: oobSize depends on syscall stuff
// NewReadMessages allocates memory for reading IPv4 Linux network stack
// messages.
requires n >= 0
ensures msgs.Mem()
ensures len(msgs) == n
func NewReadMessages(n int) (msgs Messages) 
// {
// 	m := make(Messages, n)
// 	for i := range m {
// 		// Allocate a single-element, to avoid allocations when setting the buffer.
// 		m[i].Buffers = make([][]byte, 1)
// 		m[i].OOB = make(common.RawBytes, oobSize)
// 	}
// 	return m
// }

// (tlino) TODO: m[i].Addr isn't assignable due to issue #341
// (tlino) First fix the issue: https://github.com/viperproject/gobra/issues/341
// NewWriteMessages allocates memory for writing IPv4 Linux network stack
// messages.
requires n >= 0
ensures msgs.Mem()
ensures len(msgs) == n
func NewWriteMessages(n int) (msgs Messages) //{
//  	m := make(Messages, n)
// 	for i := range m {
// 		// Allocate a single-element, to avoid allocations when setting the buffer.
// 		m[i].Buffers = make([][]byte, 1)
// 		m[i].Addr = &net.UDPAddr{}
// 	}
// 	return m
// }
