// Copyright 2016 ETH Zurich
// Copyright 2018 ETH Zurich, Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package addr

import (
//	"encoding"
	"encoding/binary"
//	"flag"
//	"fmt"
	"strconv"
	"strings"

	"gobra/lib/common"

	"gobra/verifyutils"
)

const (
	IABytes       = 8
	ISDBits       = 16
	ASBits        = 48
	BGPASBits     = 32
	MaxISD    ISD = (1 << ISDBits) - 1
	MaxAS     AS  = (1 << ASBits) - 1
	MaxBGPAS  AS  = (1 << BGPASBits) - 1

	asPartBits = 16
	asPartBase = 16
	asPartMask = (1 << asPartBits) - 1
	asParts    = ASBits / asPartBits

	ISDFmtPrefix = "ISD"
	ASFmtPrefix  = "AS"
)

// ISD is the ISolation Domain identifier. See formatting and allocations here:
// https://github.com/scionproto/scion/wiki/ISD-and-AS-numbering#isd-numbers
type ISD uint16

// ISDFromString parses an ISD from a decimal string.
func ISDFromString(s string) (ISD, error) {
	isd, err := strconv.ParseUint(s, 10, ISDBits)
	if err != nil {
		// err.Error() will contain the original value
		// (joao) added cast to common.ErrMsg around string, otherwise leads to type error
		//        fixing this requires some changes to the Assignability property: it should be a property between Expressions and Types
		// return 0, common.NewBasicError("Unable to parse ISD", err)
		return 0, common.NewBasicError(common.ErrMsg("Unable to parse ISD"), err)
	}
	return ISD(isd), nil
}

// ISDFromFileFmt parses an ISD from a file-format string. If prefix is true,
// an 'ISD' prefix is expected and stripped before parsing.
func ISDFromFileFmt(s string, prefix bool) (ISD, error) {
	if prefix {
		if !strings.HasPrefix(s, ISDFmtPrefix) {
			// (joao) added cast to common.ErrMsg around string, otherwise leads to type error
			// return 0, common.NewBasicError("prefix missing", nil, "prefix", ISDFmtPrefix, "raw", s)
			return 0, common.NewBasicError(common.ErrMsg("prefix missing"), nil, "prefix", ISDFmtPrefix, "raw", s)
		}
		s = s[len(ISDFmtPrefix):]
	}
	return ISDFromString(s)
}

func (isd ISD) String() string {
	// (joao) Gobra is not able to prove this automatically yet
	assume uint64(isd) >= 0
	return strconv.FormatUint(uint64(isd), 10)
}

// (joao) no support for global variables
// var _ encoding.TextUnmarshaler = (*AS)(nil)

// AS is the Autonomous System idenifier. See formatting and allocations here:
// https://github.com/scionproto/scion/wiki/ISD-and-AS-numbering#as-numbers
type AS uint64

ghost
pure func validAS(s string) bool

// ASFromString parses an AS from a decimal (in the case of the 32bit BGP AS
// number space) or ipv6-style hex (in the case of SCION-only AS numbers)
// string.
ensures validAS(s) ==> err == nil
ensures !validAS(s) ==> err != nil
func ASFromString(s string) (as AS, err error) {
	return asParse(s, ":")
}

// ASFromFileFmt parses an AS from a file-format string. This is the same
// format as ASFromString expects, with ':' replaced by '_'. If prefix is true,
// an 'AS' prefix is expected and stripped before parsing.
func ASFromFileFmt(s string, prefix bool) (AS, error) {
	if prefix {
		if !strings.HasPrefix(s, ASFmtPrefix) {
			// (joao) added cast to common.ErrMsg around string, otherwise leads to type error
			// return 0, common.NewBasicError("prefix missing", nil, "prefix", ASFmtPrefix, "raw", s)
			return 0, common.NewBasicError(common.ErrMsg("prefix missing"), nil, "prefix", ASFmtPrefix, "raw", s)
		}
		s = s[len(ASFmtPrefix):]
	}
	return asParse(s, "_")
}

ensures validAS(s) ==> resErr == nil
ensures !validAS(s) ==> resErr != nil
func asParse(s string, sep string) (resAS AS, resErr error) {
	if strings.Index(s, sep) == -1 {
		// Must be a BGP AS, parse as 32-bit decimal number
		as, err := strconv.ParseUint(s, 10, BGPASBits)
		if err != nil {
			assume !validAS(s)
			// err.Error() will contain the original value
			// (joao) added cast to common.ErrMsg around string, otherwise leads to type error
			// return 0, common.NewBasicError("Unable to parse AS", err) 
			return 0, common.NewBasicError(common.ErrMsg("Unable to parse AS"), err)
		}
		assume validAS(s)
		return AS(as), nil
	}
	parts := strings.Split(s, sep)
	if len(parts) != asParts {
		assume !validAS(s)
		// (joao) added cast to common.ErrMsg around string, otherwise leads to type error
		// return 0, common.NewBasicError("unable to parse AS: wrong number of separators", nil,
		return 0, common.NewBasicError(common.ErrMsg("unable to parse AS: wrong number of separators"), nil,
			"expected", asParts, "actual", len(parts), "sep", sep, "raw", s)
	}
	var as AS

	invariant 0 <= i && i <= asParts
	invariant forall j int :: 0 <= j && j < len(parts) ==> acc(&parts[j])
	for i := 0; i < asParts; i++ {
		// (joao) leads to error, types not comptabile with >>. Currently rewritten.
		// as <<= asPartBits
		as = AS(uint64(as) << asPartBits) // (joao) rewritten version
		v, err := strconv.ParseUint(parts[i], asPartBase, asPartBits)
		if err != nil {
			assume !validAS(s)
			// (joao) added cast to common.ErrMsg around string, otherwise leads to type error
			// return 0, common.NewBasicError("Unable to parse AS part", err, "raw", s)
			return 0, common.NewBasicError(common.ErrMsg("Unable to parse AS part"), err, "raw", s)
		}
		// (joao) leads to error, types not comptabile with |. Currently rewritten.
		// as |= AS(v)
		as = AS(uint64(as) | uint64(AS(v)))
	}
	assume validAS(s)
	return as, nil
}

func (as AS) String() string // {
// (joao) no support for char literals
//	return as.fmt(':')
//}

// FileFmt formats an AS for use in a file name, using '_' instead of ':' as
// the separator for SCION-only AS numbers.
func (as AS) FileFmt() string //{
//	return as.fmt('_')
//}

func (as AS) fmt(sep byte) string {
	if !as.inRange() {
		// (joao) fmt not currently supported
		// return fmt.Sprintf("%d [Illegal AS: larger than %d]", as, MaxAS)
		// (joao) added to mimic the correct control flow of the program
		return verifyutils.HavocString()
	}
	// Format BGP ASes as decimal
	if as <= MaxBGPAS {
		// (joao) Gobra is not able to prove this automatically yet
		assume uint64(as) >= 0
		return strconv.FormatUint(uint64(as), 10)
	}
	// Format all other ASes as 'sep'-separated hex.
	// (joao) local constants are not yet supported, use `var` instead
	// const maxLen = len("ffff:ffff:ffff")
	var maxLen = len("ffff:ffff:ffff")
	b := make([]byte, 0, maxLen)

	invariant forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
	for i := 0; i < asParts; i++ {
		if i > 0 {
			b = append(perm(1/2), b, sep)
		}
		shift := uint(asPartBits * (asParts - i - 1))
		// (joao) Gobra is not able to prove this automatically yet
		assume uint64(as>>shift)&asPartMask >= 0
		s := strconv.FormatUint(uint64(as>>shift)&asPartMask, asPartBase)
		// (joao) type error: strings cannot be unpacked yet
		// b = append(perm(1/2), b, s...)
		// (joao) rewritten to:
		b = append(perm(1/2), b, []byte(s)...)
	}
	return string(b)
}

func (as AS) inRange() bool {
	return as <= MaxAS
}

func (as AS) MarshalText() ([]byte, error) {
	if !as.inRange() {
		// (joao) added cast to common.ErrMsg around string, otherwise leads to type error
		// return nil, common.NewBasicError("invalid AS", nil, "max", MaxAS, "actual", as)
		return nil, common.NewBasicError(common.ErrMsg("invalid AS"), nil, "max", MaxAS, "actual", as)
	}
	return []byte(as.String()), nil
}

requires acc(as)
requires forall i int :: 0 <= i && i < len(text) ==> acc(&text[i])
ensures acc(as)
ensures forall i int :: 0 <= i && i < len(text) ==> acc(&text[i])
ensures !validAS(string(text)) ==> *as == old(*as)
func (as *AS) UnmarshalText(text []byte) error {
	newAS, err := ASFromString(string(text))
	if err != nil {
		return err
	}
	*as = newAS
	return nil
}

//var _ fmt.Stringer = IA{}
//var _ encoding.TextUnmarshaler = (*IA)(nil)
//var _ flag.Value = (*IA)(nil)

// IA represents the ISD (ISolation Domain) and AS (Autonomous System) Id of a given SCION AS.
type IA struct {
	I ISD
	A AS
}

requires b.Len() >= 8
preserves forall i int :: 0 <= i && i < b.Len() ==> acc(&b[i], 1/1000)
decreases
func IAFromRaw(b common.RawBytes) (ret IA) {
	ia := &IA{}
	ia.Parse(b)
	return *ia
}

// IAFromString parses an IA from a string of the format 'ia-as'.
func IAFromString(s string) (IA, error) {
	parts := strings.Split(s, "-")
	if len(parts) != 2 {
		// (joao) added cast to common.ErrMsg around string, otherwise leads to type error
		// original: return IA{}, common.ErrMsg("Invalid ISD-AS", nil, "raw", s)
		return IA{}, common.NewBasicError(common.ErrMsg("Invalid ISD-AS"), nil, "raw", s)
	}
	isd, err := ISDFromString(parts[0])
	if err != nil {
		return IA{}, err
	}
	as, err := ASFromString(parts[1])
	if err != nil {
		return IA{}, err
	}
	return IA{I: isd, A: as}, nil
}

// IAFromFileFmt parses an IA from a file-format
func IAFromFileFmt(s string, prefixes bool) (IA, error) {
	parts := strings.Split(s, "-")
	if len(parts) != 2 {
		// (joao) added cast to common.ErrMsg around string, otherwise leads to type error
		// original: return IA{}, common.NewBasicError("Invalid ISD-AS", nil, "raw", s)
		return IA{}, common.NewBasicError(common.ErrMsg("Invalid ISD-AS"), nil, "raw", s)
	}
	isd, err := ISDFromFileFmt(parts[0], prefixes)
	if err != nil {
		return IA{}, err
	}
	as, err := ASFromFileFmt(parts[1], prefixes)
	if err != nil {
		return IA{}, err
	}
	return IA{I: isd, A: as}, nil
}

func (ia IA) MarshalText() ([]byte, error) {
	return []byte(ia.String()), nil
}

// UnmarshalText allows IA to be used as a map key in JSON.
preserves acc(ia)
preserves forall i int :: 0 <= i && i < len(text) ==> acc(&text[i], 1/1000)
func (ia *IA) UnmarshalText(text []byte) error {
	if len(text) == 0 {
		*ia = IA{}
		return nil
	}
	newIA, err := IAFromString(string(text))
	if err != nil {
		return err
	}
	*ia = newIA
	return nil
}

requires b.Len() >= 8
preserves acc(ia) && forall i int :: 0 <= i && i < b.Len() ==> acc(&b[i], 1/1000)
decreases
func (ia *IA) Parse(b common.RawBytes) {
	//*ia = IAInt(binary.BigEndian.Uint64(b)).IA()
	*ia = (IAInt(binary.BigEndian.Uint64(b))).IA()
}

// avoiding quantification on purpose in the specification of Write
requires acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3]) && acc(&b[4]) && acc(&b[5]) && acc(&b[6]) && acc(&b[7])
ensures acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3]) && acc(&b[4]) && acc(&b[5]) && acc(&b[6]) && acc(&b[7])
decreases
func (ia IA) Write(b common.RawBytes) {
	binary.BigEndian.PutUint64(b, uint64(ia.IAInt()))
}

decreases
func (ia IA) IAInt() IAInt // {
// (joao) Logic error: unexpected type IAInt
//	return IAInt(ia.I)<<ASBits | IAInt(ia.A&MaxAS)
// }

func (ia IA) IsZero() bool {
	return ia.I == 0 && ia.A == 0
}

func (ia IA) Equal(other IA) bool {
	return ia.I == other.I && ia.A == other.A
}

// IsWildcard returns whether the ia has a wildcard part (isd or as).
func (ia IA) IsWildcard() bool {
	return ia.I == 0 || ia.A == 0
}

func (ia IA) String() string // {
//	return fmt.Sprintf("%d-%s", ia.I, ia.A)
//}

// FileFmt returns a file-system friendly representation of ia. If prefixes is
// true, the format will be in the form of ISD%d-AS%d. If it is false, the
// format is just %d-%d.
func (ia IA) FileFmt(prefixes bool) string {
	fmts := "%d-%s"
	if prefixes {
		fmts = "ISD%d-AS%s"
	}
//	return fmt.Sprintf(fmts, ia.I, ia.A.FileFmt())
}

// Set implements flag.Value interface
// (joao) may be simplified, only requires acc(ia) if IAFromString leads to nil error
requires acc(ia)
ensures acc(ia)
func (ia *IA) Set(s string) error {
	pIA, err := IAFromString(s)
	if err != nil {
		return err
	}
	*ia = pIA
	return nil
}

// IAInt is an integer representation of an ISD-AS.
type IAInt uint64

decreases
func (iaI IAInt) IA() IA {
	return IA{I: ISD(iaI >> ASBits), A: AS(iaI) & MaxAS}
}

func (iaI IAInt) String() string {
	// (joao) parse error without parentheses
	// return iaI.IA().String()
	return (iaI.IA()).String()
}

// ensures forall i int :: 0 <= i && i < len(res) ==> acc(&res[i])
ensures e == nil
func (ia IAInt) MarshalText() (res []byte, e error) {
	// (joao) requires parentheses surrounding IAInt(ia) to make it parse
	// return []byte(IAInt(ia).String()), nil
	return []byte((IAInt(ia)).String()), nil
}

preserves acc(ia)
preserves forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
func (ia *IAInt) UnmarshalText(b []byte) error {
	tIA, err := IAFromString(string(b))
	if err != nil {
		return nil
	}
	*ia = tIA.IAInt()
	return nil
}
