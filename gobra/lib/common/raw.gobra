// Copyright 2016 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package common

import (
	//"fmt"
)

// var _ Payload = (*RawBytes)(nil)

type RawBytes []byte

pred (r RawBytes) Mem() {
	forall i int :: 0 <= i && i < len(r) ==> acc(&r[i])
}

preserves acc(r.Mem(), 1/100000)
func (r RawBytes) String() string //{
//  return fmt.Sprintf("%x", []byte(r))
//}

pure
ensures ret == len(r)
func (r RawBytes) Len() (ret int) {
	return len(r)
}

requires acc(r.Mem(), 1/100000)
ensures  acc(r.Mem(), 1/100000)
ensures  res.Mem()
ensures  err == nil
func (r RawBytes) Copy() (res Payload, err error) {
	unfold acc(r.Mem(), 1/1000000)
	// (joao) introduced var `tmp` to allow folding and unfolding
	var tmp RawBytes = append(perm(1/10000000), RawBytes{}, r...)
	fold acc(r.Mem(), 1/1000000)
	fold tmp.Mem()
	return tmp, nil
}

preserves acc(r.Mem(), 1/100000)
preserves acc(b.Mem())
ensures len(r) <= len(b) ==> err == nil
func (r RawBytes) WritePld(b RawBytes) (res int, err error) {
	if len(b) < len(r) {
		// (joao) Gobra does not type check if the type conversion to ErrMsg is not present
		// return 0, NewBasicError("Insufficient space", nil, "expected", len(r), "actual", len(b))
		return 0, NewBasicError(ErrMsg("Insufficient space"), nil, "expected", len(r), "actual", len(b))
	}
	// (joao) introduced var `tmp` to be able to do the folds after the return statement
	unfold b.Mem()
	unfold acc(r.Mem(), 1/100000)
	tmp := copy(b, r, perm(1/1000000))
	fold acc(r.Mem(), 1/100000)
	fold b.Mem()
	return tmp, nil
}

// (joao) Trusted function
preserves r.Mem()
ensures   unfolding r.Mem() in forall i int :: 0 <= i && i < len(r) ==> r[i] == 0
func (r RawBytes) Zero() // {
//	for i := range r {
//		r[i] = 0
//	}
//}