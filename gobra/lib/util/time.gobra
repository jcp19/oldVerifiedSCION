// Copyright 2018 ETH Zurich
// Copyright 2019 ETH Zurich, Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package util

import (
	// "encoding/json"
	"strconv"
	"time"

	// "github.com/scionproto/scion/go/lib/common"
	"gobra/lib/common"
)

// (joao) Global variables not supported
// var _ json.Marshaler = (*UnixTime)(nil)
// var _ json.Unmarshaler = (*UnixTime)(nil)

// UnixTime allows parsing and packing timestamps in seconds since epoch.
type UnixTime struct {
    // (joao) in the original code
	// time.Time
	Time time.Time
}

requires acc(t)
requires forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
ensures  acc(t)
ensures  forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
decreases
func (t *UnixTime) UnmarshalJSON(b []byte) error {
	var seconds uint64
	// Only allow up to 63-bit to avoid wrap around.
	seconds, err := strconv.ParseUint(string(b), 10, 63)
	if err != nil {
		return err
	}
	t.Time = time.Unix(int64(seconds), 0)
	return nil
}

// MarshalJSON marshals the time as seconds since unix epoch. This must be a
// value receiver.
decreases
ensures forall i int :: 0 <= i && i < len(res) ==> acc(&res[i])
func (t UnixTime) MarshalJSON() (res []byte, error) {
	// return []byte(strconv.FormatUint(uint64(t.Unix()), 10)), nil
    time := uint64(t.Time.Unix())
    assume time >= 0 // (joao) obtained from the type system
	return []byte(strconv.FormatUint(time, 10)), nil
}

preserves acc(t, 1/1000)
decreases
func (t *UnixTime) String() string {
	return TimeToCompact(t.Time)
}

// SecsToTime takes seconds stored in a uint32.
decreases
func SecsToTime(t uint32) time.Time {
	return time.Unix(int64(t), 0)
}

// TimeToSecs returns seconds stored as uint32.
decreases
func TimeToSecs(t time.Time) uint32 {
	return uint32(t.Unix())
}

// TimeToString formats the time as a string.
decreases _
func TimeToString(t time.Time) string /* {
	return (t.UTC()).Format(common.TimeFmt)
}
*/

// SecsToCompact creates a compact string representation from the seconds.
decreases
func SecsToCompact(t uint32) string {
	return TimeToCompact(SecsToTime(t))
}

// TimeToCompact formats the time as a compat string, e.g. it discards the
// milliseconds parts if the time only has second resolution.
decreases
func TimeToCompact(t time.Time) string {
	if t.Nanosecond() == 0 {
		// (joao) TimeFmtSecs not supported yet
		// return (t.UTC()).Format(common.TimeFmtSecs)
        assume false
	}
	return TimeToString(t)
}
