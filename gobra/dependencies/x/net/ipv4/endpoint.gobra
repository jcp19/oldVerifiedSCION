package ipv4

import (
	"net"
	"gobra/dependencies/x/net/internal/socket"
)

pred (p *PacketConn) Mem() {
	acc(p)
}

// A PacketConn represents a packet network endpoint that uses the
// IPv4 transport. It is used to control several IP-level socket
// options including multicasting. It also provides datagram based
// network I/O methods specific to the IPv4 and higher layer protocols
// such as UDP.
type PacketConn struct {
	// genericOpt
	// dgramOpt
	// payloadHandler
}

// NewPacketConn returns a new PacketConn using c as its underlying
// transport.
requires c.mem()
ensures p.Mem()
func NewPacketConn(c net.PacketConn) (p *PacketConn) 
// {
// 	cc, _ := socket.NewConn(c.(net.Conn))
// 	p := &PacketConn{
// 		genericOpt:     genericOpt{Conn: cc},
// 		dgramOpt:       dgramOpt{Conn: cc},
// 		payloadHandler: payloadHandler{PacketConn: c, Conn: cc},
// 	}
// 	return p
// }