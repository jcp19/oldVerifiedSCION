package socket

import (
	"net"
	"gobra/verifyutils"
)

// (tlino) This predicate is tailored for the SCION code.
// (tlino) This predicate is established right after initializing a *Message
pred (m *Message) MemPartiallyInitialized() {
	acc(m) &&
	(len(m.Buffers) == 1) &&
	acc(&(m.Buffers)[0]) &&
	(forall k int :: 0 <= k && k < cap((m.Buffers)[0]) ==> acc(&(m.Buffers)[0][k])) &&
	(forall i int :: 0 <= i && i < len(m.OOB) ==> acc(&(m.OOB)[i])) &&
	m.N == 0 &&
	m.Addr.Mem()
}

// (tlino) This predicate is tailored for the SCION code
// (tlino) This predicate is established for the message buffer.
// (tlino) A valid buffer in the dataplane must have a capacity of verifyutils.BufSize.
// (tlino) If this property does not hold, slice resizing operations may fail.
pred (m *Message) Mem() {
	acc(m) &&
	(len(m.Buffers) == 1) &&
	acc(&(m.Buffers)[0]) &&
	cap((m.Buffers)[0]) == verifyutils.BufSize &&
	(forall k int :: 0 <= k && k < cap((m.Buffers)[0]) ==> acc(&(m.Buffers)[0][k])) &&
	(forall i int :: 0 <= i && i < len(m.OOB) ==> acc(&(m.OOB)[i])) &&
	0 <= m.N && m.N <= verifyutils.BufSize &&
	m.Addr.Mem()
}

// (tlino) This predicate is tailored for the SCION code.
// (tlino) This predicate is established for every message sent by the SCION border router.
pred (m *Message) MemSend() {
	acc(m) &&
	(len(m.Buffers) == 1) &&
	acc(&(m.Buffers)[0]) &&
	(((m.Buffers)[0] != nil) ==> ((forall k int :: 0 <= k && k < len((m.Buffers)[0]) ==> acc(&(m.Buffers)[0][k])))) &&
	(forall i int :: 0 <= i && i < len(m.OOB) ==> acc(&(m.OOB)[i])) &&
	(m.Addr != nil && m.WildcardAddressAcc ==> acc(m.Addr.Mem(), _)) &&
	(m.Addr != nil && !m.WildcardAddressAcc ==> m.Addr.Mem())
}

// (tlino) added helper function
requires acc(m.Mem(), _)
decreases
pure func (m *Message) HasBuffersNonZeroLength() bool {
	return unfolding acc(m.Mem(), _) in len(m.Buffers) >= 1
}

// A Message represents an IO message.
type Message struct {
	// When writing, the Buffers field must contain at least one
	// byte to write.
	// When reading, the Buffers field will always contain a byte
	// to read.
	Buffers [][]byte

	// OOB contains protocol-specific control or miscellaneous
	// ancillary data known as out-of-band data.
	OOB []byte

	// Addr specifies a destination address when writing.
	// It can be nil when the underlying protocol of the raw
	// connection uses connection-oriented communication.
	// After a successful read, it may contain the source address
	// on the received packet.
	Addr net.Addr

	N     int // # of bytes read or written from/to Buffers
	NN    int // # of bytes read or written from/to OOB
	Flags int // protocol-specific information on the received message

	// ghost
	WildcardAddressAcc bool
}