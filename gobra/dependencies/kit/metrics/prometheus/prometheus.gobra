// Package prometheus provides Prometheus implementations for metrics.
// Individual metrics are mapped to their Prometheus counterparts, and
// (depending on the constructor used) may be automatically registered in the
// global Prometheus metrics registry.

// Taken from https://github.com/go-kit/kit/blob/master/metrics/prometheus/prometheus.go

package prometheus

import (
	// "github.com/prometheus/client_golang/prometheus"
	"gobra/dependencies/prometheus/client_golang/prometheus"
	// "github.com/go-kit/kit/metrics"
	"gobra/dependencies/kit/metrics"
	// "github.com/go-kit/kit/metrics/internal/lv"
)

// Counter implements Counter, via a Prometheus CounterVec.
type Counter struct {
	cv  *prometheus.CounterVec
	// (joao) field ignored for now
	// lvs lv.LabelValues
}

pred (c *Counter) Mem()

// NewCounterFrom constructs and registers a Prometheus CounterVec,
// and returns a usable Counter object.
requires opts.ConstLabels != nil ==> acc(opts.ConstLabels)
requires forall i int :: 0 <= i && i < len(labelNames) ==> acc(&labelNames[i])
ensures res.Mem()
decreases _
func NewCounterFrom(opts prometheus.CounterOpts, labelNames []string) (res *Counter)

// NewCounter wraps the CounterVec and returns a usable Counter object.
requires cv.Mem()
ensures  res.Mem()
decreases _
func NewCounter(cv *prometheus.CounterVec) (res *Counter)

// With implements Counter.
requires c.Mem()
requires forall i int :: 0 <= i && i < len(labelValues) ==> acc(&labelValues[i])
ensures  res.Mem()
// decreases _
func (c *Counter) With(labelValues ...string) (res metrics.Counter)

// Add implements Counter.
preserves c.Mem()
decreases _
func (c *Counter) Add(delta float64)

/*
// (joao) implementation proof does not succeed due to a bug in Gobra
(*Counter) implements metrics.Counter {
	(c *Counter) Add(delta float64) {
		c.Add(delta)
	}

	(c *Counter) With(labelValues ...string) metrics.Counter {
		return c.With(labelValues)
	}
}
*/

// Gauge implements Gauge, via a Prometheus GaugeVec.
type Gauge struct {
	gv  *prometheus.GaugeVec
	// (joao) field ignored for now
	// lvs lv.LabelValues
}

pred (c *Gauge) Mem()

// NewGaugeFrom constructs and registers a Prometheus GaugeVec,
// and returns a usable Gauge object.
requires opts.ConstLabels != nil ==> acc(opts.ConstLabels)
requires forall i int :: 0 <= i && i < len(labelNames) ==> acc(&labelNames[i])
ensures res.Mem()
decreases _
func NewGaugeFrom(opts prometheus.GaugeOpts, labelNames []string) (res *Gauge)

// NewGauge wraps the GaugeVec and returns a usable Gauge object.
requires gv.Mem()
ensures  res.Mem()
decreases _
func NewGauge(gv *prometheus.GaugeVec) (res *Gauge)

// With implements Gauge.
requires g.Mem()
requires forall i int :: 0 <= i && i < len(labelValues) ==> acc(&labelValues[i])
ensures  res.Mem()
decreases _
func (g *Gauge) With(labelValues ...string) (res metrics.Gauge)

// Set implements Gauge.
preserves g.Mem()
decreases _
func (g *Gauge) Set(value float64)

// Add is supported by Prometheus GaugeVecs.
preserves g.Mem()
decreases _
func (g *Gauge) Add(delta float64)

// (joao) the following types and methods haven't been considered yet because they are not needed
/*
// Summary implements Histogram, via a Prometheus SummaryVec. The difference
// between a Summary and a Histogram is that Summaries don't require predefined
// quantile buckets, but cannot be statistically aggregated.
type Summary struct {
	sv  *prometheus.SummaryVec
	lvs lv.LabelValues
}

// NewSummaryFrom constructs and registers a Prometheus SummaryVec,
// and returns a usable Summary object.
func NewSummaryFrom(opts prometheus.SummaryOpts, labelNames []string) *Summary {
	sv := prometheus.NewSummaryVec(opts, labelNames)
	prometheus.MustRegister(sv)
	return NewSummary(sv)
}

// NewSummary wraps the SummaryVec and returns a usable Summary object.
func NewSummary(sv *prometheus.SummaryVec) *Summary {
	return &Summary{
		sv: sv,
	}
}

// With implements Histogram.
func (s *Summary) With(labelValues ...string) metrics.Histogram {
	return &Summary{
		sv:  s.sv,
		lvs: s.lvs.With(labelValues...),
	}
}

// Observe implements Histogram.
func (s *Summary) Observe(value float64) {
	s.sv.With(makeLabels(s.lvs...)).Observe(value)
}

// Histogram implements Histogram via a Prometheus HistogramVec. The difference
// between a Histogram and a Summary is that Histograms require predefined
// quantile buckets, and can be statistically aggregated.
type Histogram struct {
	hv  *prometheus.HistogramVec
	lvs lv.LabelValues
}

// NewHistogramFrom constructs and registers a Prometheus HistogramVec,
// and returns a usable Histogram object.
func NewHistogramFrom(opts prometheus.HistogramOpts, labelNames []string) *Histogram {
	hv := prometheus.NewHistogramVec(opts, labelNames)
	prometheus.MustRegister(hv)
	return NewHistogram(hv)
}

// NewHistogram wraps the HistogramVec and returns a usable Histogram object.
func NewHistogram(hv *prometheus.HistogramVec) *Histogram {
	return &Histogram{
		hv: hv,
	}
}

// With implements Histogram.
func (h *Histogram) With(labelValues ...string) metrics.Histogram {
	return &Histogram{
		hv:  h.hv,
		lvs: h.lvs.With(labelValues...),
	}
}

// Observe implements Histogram.
func (h *Histogram) Observe(value float64) {
	h.hv.With(makeLabels(h.lvs...)).Observe(value)
}

func makeLabels(labelValues ...string) prometheus.Labels {
	labels := prometheus.Labels{}
	for i := 0; i < len(labelValues); i += 2 {
		labels[labelValues[i]] = labelValues[i+1]
	}
	return labels
}
*/