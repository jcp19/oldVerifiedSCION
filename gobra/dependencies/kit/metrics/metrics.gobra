package metrics

// Counter describes a metric that accumulates values monotonically.
// An example of a counter is the number of received HTTP requests.
type Counter interface {
    pred Mem()

    requires Mem()
    requires forall i int :: 0 <= i && i < len(labelValues) ==> acc(&labelValues[i], 1/1000)
    ensures  Mem()
    ensures  forall i int :: 0 <= i && i < len(labelValues) ==> acc(&labelValues[i], 1/1000)
	With(labelValues ...string) (res Counter)

    requires Mem()
    ensures  Mem()
	Add(delta float64)
}

// Gauge describes a metric that takes specific values over time.
// An example of a gauge is the current depth of a job queue.
type Gauge interface {
    pred Mem()

    requires Mem()
    requires forall i int :: 0 <= i && i < len(labelValues) ==> acc(&labelValues[i], 1/1000)
    ensures  Mem()
    ensures  forall i int :: 0 <= i && i < len(labelValues) ==> acc(&labelValues[i], 1/1000)
	With(labelValues ...string) Gauge

    requires Mem()
    ensures  Mem()
	Set(value float64)

    requires Mem()
    ensures  Mem()
	Add(delta float64)
}

// Histogram describes a metric that takes repeated observations of the same
// kind of thing, and produces a statistical summary of those observations,
// typically expressed as quantiles or buckets. An example of a histogram is
// HTTP request latencies.
type Histogram interface {
    pred Mem()

    requires Mem()
    requires forall i int :: 0 <= i && i < len(labelValues) ==> acc(&labelValues[i], 1/1000)
    ensures  Mem()
    ensures  forall i int :: 0 <= i && i < len(labelValues) ==> acc(&labelValues[i], 1/1000)
	With(labelValues ...string) Histogram

    requires Mem()
    ensures  Mem()
	Observe(value float64)
}
