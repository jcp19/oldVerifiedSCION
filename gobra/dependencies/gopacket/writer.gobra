package gopacket

import "gobra/verifyutils"

// (joao) TODO
type SerializableLayer interface {
	pred Mem()

	requires Mem() && b.Mem()
	ensures Mem() && b.Mem()
	SerializeTo(b SerializeBuffer, opts SerializeOptions) error

	pure LayerType() LayerType
}

type SerializeOptions struct {
	FixLengths bool
	ComputeChecksums bool
}

// (joao) Checked
type SerializeBuffer interface {
	pred Mem()

	/* Ghost Operations */
	/* */
	pred PrependBytesMem(data []byte)

	/* ghost */
	requires PrependBytesMem(data) && verifyutils.BytesAcc(data)
	ensures  Mem()
	CombinePrependBytesMem(data []byte)

	/* */
	pred AppendBytesMem(data []byte)

	/* ghost */
	requires AppendBytesMem(data) && verifyutils.BytesAcc(data)
	ensures  Mem()
	CombineAppendBytesMem(data []byte)

	/* */
	pred BytesMem(data []byte)

	/* ghost */
	requires BytesMem(data) && verifyutils.BytesAcc(data)
	ensures  Mem()
	CombineBytesMem(data []byte)
	/* End of Ghost Operations */

	requires Mem()
	ensures BytesMem(data) && verifyutils.BytesAcc(data)
	Bytes() (data []byte)

	requires Mem()
	ensures err == nil ==> PrependBytesMem(data) && verifyutils.BytesAcc(data)
	ensures err == nil ==> len(data) == num
	PrependBytes(num int) (data []byte, err error)

	requires Mem()
	ensures err == nil ==> AppendBytesMem(data) && verifyutils.BytesAcc(data)
	ensures err == nil ==> len(data) == num
	AppendBytes(num int) (data []byte, err error)

	requires Mem()
	ensures Mem()
	Clear() error

	requires Mem()
	ensures Mem()
	ensures forall i int :: 0 <= i && i < len(data) ==> acc(&data[i])
	Layers() (data []LayerType)

	requires Mem()
	ensures Mem()
	PushLayer(LayerType)
}

// (joao) TODO
requires forall i int :: 0 <= i && i < len(layers) ==> acc(&layers[i]) && layers[i].Mem()
requires w.Mem()
ensures forall i int :: 0 <= i && i < len(layers) ==> acc(&layers[i]) && layers[i].Mem()
ensures w.Mem()
func SerializeLayers(w SerializeBuffer, opts SerializeOptions, layers ...SerializableLayer) error 