package gopacket

import "gobra/verifyutils"

type SerializableLayer interface {
	pred Mem()

	requires Mem() && b.Mem()
	ensures  err == nil ==> (Mem() && b.Mem())
	SerializeTo(b SerializeBuffer, opts SerializeOptions) (err error)

	pure LayerType() LayerType
}

type SerializeOptions struct {
	FixLengths bool
	ComputeChecksums bool
}

type SerializeBuffer interface {
	pred Mem()

	/* */
	pred AppendBytesMem(data []byte)

	/* ghost */
	requires AppendBytesMem(data) && verifyutils.BytesAcc(data)
	ensures  Mem()
	CombineAppendBytesMem(data []byte)

	/* End of Ghost Operations */

	requires Mem()
	ensures verifyutils.BytesAcc(data) && cap(data) <= verifyutils.BufSize
	ensures verifyutils.BytesAcc(data) --* Mem()
	Bytes() (data []byte)

	requires Mem()
	ensures err == nil ==> verifyutils.BytesAcc(data)
	ensures err == nil ==> len(data) == num
	ensures err == nil ==> verifyutils.BytesAcc(data) --* Mem()
	PrependBytes(num int) (data []byte, err error)

	requires Mem()
	ensures err == nil ==> AppendBytesMem(data) && verifyutils.BytesAcc(data)
	ensures err == nil ==> len(data) == num
	AppendBytes(num int) (data []byte, err error)

	requires Mem()
	ensures Mem()
	Clear() error

	requires Mem()
	ensures Mem()
	ensures forall i int :: 0 <= i && i < len(data) ==> acc(&data[i])
	Layers() (data []LayerType)

	requires Mem()
	ensures Mem()
	PushLayer(LayerType)
}

preserves w.Mem()
preserves forall i int :: 0 <= i && i < len(layers) ==> acc(&layers[i]) && layers[i].Mem()
func SerializeLayers(w SerializeBuffer, opts SerializeOptions, layers ...SerializableLayer) error 

// (tlino) added stub
// NewSerializeBuffer creates a new instance of the default implementation of
// the SerializeBuffer interface.
ensures sb.Mem()
decreases
func NewSerializeBuffer() (sb SerializeBuffer) //{
// 	return &serializeBuffer{}
// }