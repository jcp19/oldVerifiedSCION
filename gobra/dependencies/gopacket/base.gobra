package gopacket

import "gobra/verifyutils"

type Layer interface {
	pred Mem()
	pred IsLayerContents(data []byte)
	pred IsLayerPayload(data []byte)

	// (lhalm) returns a global constant, no need for memory permissions
	pure LayerType() LayerType

	requires Mem()
	ensures  verifyutils.BytesAcc(data) && IsLayerContents(data)
	LayerContents() (data []byte)

	requires Mem()
	ensures  verifyutils.BytesAcc(data) && IsLayerPayload(data)
	LayerPayload() (data []byte)

	/*ghost*/
	requires IsLayerContents(data) && verifyutils.BytesAcc(data)
	ensures  Mem()
	CombineLayerContents(data []byte)

	/*ghost*/
	requires IsLayerPayload(data) && verifyutils.BytesAcc(data)
	ensures  Mem()
	CombineLayerPayload(data []byte)
}

type NetworkLayer interface {
	pred Mem()
	pred IsLayerContents(data []byte)
	pred IsLayerPayload(data []byte)

	// (lhalm) returns a global constant, no need for memory permissions
	pure LayerType() LayerType

	requires Mem()
	ensures  verifyutils.BytesAcc(data) && IsLayerContents(data)
	LayerContents() (data []byte)

	requires Mem()
	ensures  verifyutils.BytesAcc(data) && IsLayerPayload(data)
	LayerPayload() (data []byte)

	// (lhalm) end of Layer methods
	// NetworkFlow() Flow

	/*ghost*/
	requires IsLayerContents(data) && verifyutils.BytesAcc(data)
	ensures  Mem()
	CombineLayerContents(data []byte)

	/*ghost*/
	requires IsLayerPayload(data) && verifyutils.BytesAcc(data)
	ensures  Mem()
	CombineLayerPayload(data []byte)
}

// pred (p Payload) Mem() { true }
// (Payload) implements SerializableLayer {

// 	pure (p Payload) LayerType() (lt LayerType) {
// 		return p.LayerType()
// 	} 

// 	(p Payload) SerializeTo(b SerializeBuffer, opts SerializeOptions) (err error) {
// 		err = p.SerializeTo(b, opts)
// 	}
// }

// type Payload []byte

// pure func (p Payload) LayerType() LayerType

// func (p Payload) LayerContents() []byte

// func (p Payload) LayerPayload() []byte

// func (p Payload) Payload() []byte { return []byte(p) }

// func (p Payload) String() string

// func (p Payload) GoString() string

// func (p Payload) CanDecode() LayerClass { return LayerTypePayload }

// func (p Payload) NextLayerType() LayerType { return LayerTypeZero }

// func (p *Payload) DecodeFromBytes(data []byte, df DecodeFeedback) error {
// 	*p = Payload(data)
// 	return nil
// }

// func (p Payload) SerializeTo(b SerializeBuffer, opts SerializeOptions) error