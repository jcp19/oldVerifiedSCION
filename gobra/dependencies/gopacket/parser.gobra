package gopacket

import "gobra/verifyutils"

type DecodingLayer interface {
	pred Mem()

	// DecodeFromBytes(data []byte, df DecodeFeedback) error
	// CanDecode() LayerClass
	// NextLayerType() LayerType
	// LayerPayload() []byte
}

type DecodingLayerParser struct {
	// DecodingLayerParserOptions
	// dlc   DecodingLayerContainer
	// first LayerType
	// df    DecodeFeedback

	// decodeFunc DecodingLayerFunc

	// Truncated bool
}

pred bytesAcc(data []byte) {
	forall i int :: 0 <= i && i < len(data) ==> acc(&data[i])
}

pred decodedAcc(data []LayerType) {
	forall i int :: 0 <= i && i < len(data) ==> acc(&data[i])
}

requires forall i int :: 0 <= i && i < len(decoders) ==> acc(&decoders[i])
ensures forall i int :: 0 <= i && i < len(decoders) ==> acc(&decoders[i])
ensures acc(d)
decreases
func NewDecodingLayerParser(first LayerType, decoders ...DecodingLayer) (d *DecodingLayerParser)

requires acc(l)
requires verifyutils.BytesAcc(data)
requires acc(decoded, 1/1000)
requires forall i int :: 0 <= i && i < len(*decoded) ==> acc(&(*decoded)[i])
ensures  acc(l)
ensures  verifyutils.BytesAcc(data)
ensures  acc(decoded, 1/1000)
// ensures  old(*decoded) == *decoded
ensures  old(len(*decoded)) == len(*decoded)
// ensures  forall i int :: 0 <= i && i < len(*decoded) ==> &(*decoded)[i] == old(&(*decoded)[i])
ensures  forall i int :: { (*decoded)[i] } 0 <= i && i < len(*decoded) ==> acc(&(*decoded)[i])
decreases
func (l *DecodingLayerParser) DecodeLayers(data []byte, decoded *[]LayerType) (err error)

(UnsupportedLayerType) implements error {

	(s UnsupportedLayerType) Error() (err string) {
		err = s.Error()
	}
}

type UnsupportedLayerType LayerType

func (e UnsupportedLayerType) Error() string