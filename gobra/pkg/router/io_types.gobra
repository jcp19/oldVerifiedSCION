package router

import (
    "gobra/dependencies/x/net/ipv4"
    underlayconn "gobra/lib/underlay/conn"
    "gobra/lib/slayers"
    "gobra/dependencies/gopacket/layers"
    "gobra/lib/addr"

    "gobra/verifyutils"
)

// abstract types

type AbsBytes domain {}

type AbsMessage domain {
    func GetAbsMessagePayload(AbsMessage) AbsBytes
}

type AbsProcessResult domain {
    func GetAbsProcessResult(AbsProcessResult) uint16
    func GetProcessResultResultCase(AbsProcessResult) ResultCase
}

type AbsSCION domain {
    func GetAbsSCIONRawPkt(AbsSCION) AbsBytes
    func GetAbsSCIONRawPath(AbsSCION) AbsRawPath
    func GetAbsSCIONDstIA(AbsSCION) AbsIA
}

type AbsIA domain {
    func EqualAbsIA(AbsIA, AbsIA) bool
}

type AbsRawPath domain {
    func GetAbsRawPathCurrHF(AbsRawPath) int
    func GetAbsRawPathNumHops(AbsRawPath) int
}

type AbsBFD domain {}

// other types

type ResultCase uint

const (
    ErrorCase ResultCase = 0
	Inbound ResultCase = 1
	Transit ResultCase = 2
	TransitFromOtherBR ResultCase = 3
)

// abstraction functions

ghost
requires forall i int :: { b[i] } 0 <= i && i < len(b) ==> acc(&b[i], _)
decreases _
pure func ToAbsBytes(b []byte) AbsBytes

ghost
requires verifyutils.BytesAcc(b)
decreases _
pure func ToAbsBytes2(b []byte) (res AbsBytes)

ghost
requires msg.Mem()
ensures res == unfolding msg.Mem() in ToAbsBytes(((msg.Buffers)[0])[0:(msg.N)])
decreases _
pure func MessageToAbsBytesBounded(msg *ipv4.Message) (res AbsBytes)

ghost
requires acc(m.Mem(), _)
decreases _
pure func ToAbsMessage(m *ipv4.Message) (res AbsMessage)

ghost
requires acc(m.MemSend(), _)
decreases _
pure func ToAbsMessage_MemSend(m *ipv4.Message) (res AbsMessage)

ghost
requires acc(pr.Mem(), _)
decreases _
pure func ToAbsProcessResult(pr processResult) AbsProcessResult

ghost
requires acc(s.Mem(), _)
decreases _
pure func ToAbsSCION(s *slayers.SCION) AbsSCION

ghost
requires acc(bfd.MemWithOutSlices(), _)
decreases _
pure func ToAbsBFD(bfd *layers.BFD) AbsBFD

ghost
requires 0 <= pkts && pkts <= len(msgs)
requires msgs.Mem()
ensures len(res) == pkts
ensures unfolding msgs.Mem() in (forall i int :: 0 <= i && i < pkts ==> res[i] == ToAbsMessage(&msgs[i]))
decreases _
pure func ToAbsMessages(msgs underlayconn.Messages, pkts int) (res seq[AbsMessage])

ghost
decreases _
pure func ToAbsIA(ia addr.IA) AbsIA

// lemmas
ghost
requires acc(verifyutils.BytesAcc(b), _)
requires absBytes == unfolding acc(verifyutils.BytesAcc(b), _) in ToAbsBytes(b)
ensures absBytes == ToAbsBytes2(b)
decreases _
pure func relateByteAccess(b []byte, absBytes AbsBytes) bool