package router

import (
    "gobra/dependencies/x/net/ipv4"
    underlayconn "gobra/lib/underlay/conn"
    "gobra/lib/slayers"
    "gobra/dependencies/gopacket/layers"
)

// abstract types

type AbsMessage domain {}

type AbsProcessResult domain {}

type AbsSCION domain {}

type AbsBFD domain {}

// abstraction functions

ghost
requires acc(m.Mem(), _)
decreases _
pure func ToAbsMessage(m *ipv4.Message) (res AbsMessage)

ghost
requires acc(m.MemSend(), _)
decreases _
pure func ToAbsMessage_MemSend(m *ipv4.Message) (res AbsMessage)

ghost
requires acc(pr.Mem(), _)
decreases _
pure func ToAbsProcessResult(pr processResult) AbsProcessResult

ghost
requires acc(s.Mem(), _)
decreases _
pure func ToAbsSCION(s *slayers.SCION) AbsSCION

ghost
requires acc(bfd.MemWithOutSlices(), _)
decreases _
pure func ToAbsBFD(bfd *layers.BFD) AbsBFD

ghost
requires 0 <= pkts && pkts <= len(msgs)
requires msgs.Mem()
ensures len(res) == pkts
ensures unfolding msgs.Mem() in (forall i int :: 0 <= i && i < pkts ==> res[i] == (unfolding (&msgs[i]).Mem() in ToAbsMessage(&msgs[i])))
decreases _
pure func ToAbsMessages(msgs underlayconn.Messages, pkts int) (res seq[AbsMessage])