package router

import (
	// underlayconn "github.com/scionproto/scion/go/lib/underlay/conn"
	// (joao) leads to empty.head error if run without qualified import
	// "github.com/scionproto/scion/go/lib/topology"
	"gobra/lib/addr"
	"gobra/lib/slayers"
	"gobra/lib/slayers/path"
	"gobra/lib/slayers/path/scion"
	"gobra/lib/util"
	"gobra/lib/serrors"
	"gobra/lib/common"
	"sync"
	"net"
	"time"

	"dependencies/gopacket"
) 

var (
	// alreadySet                    = serrors.New("already set")
	// cannotRoute                   = serrors.New("cannot route, dropping pkt")
	// emptyValue                    = serrors.New("empty value")
	// malformedPath                 = serrors.New("malformed path content")
	// modifyExisting                = serrors.New("modifying a running dataplane is not allowed")
	// noSVCBackend                  = serrors.New("cannot find internal IP for the SVC")
	// unsupportedPathType           = serrors.New("unsupported path type")
	// unsupportedPathTypeNextHeader = serrors.New("unsupported combination")
	// noBFDSessionFound             = serrors.New("no BFD sessions was found")
	// noBFDSessionConfigured        = serrors.New("no BFD sessions have been configured")
	// errBFDDisabled                = serrors.New("BFD is disabled")
)

(scmpError) implements error {

	(s scmpError) Error() (err string) {
		err = s.Error()
	}
}

type scmpError struct {
	TypeCode slayers.SCMPTypeCode
	Cause    error
}

func (e scmpError) Error() string {
	// (lhalm) throws NodeNotInTree exception
	//err := serrors.New("scmp", "typecode", e.TypeCode, "cause", e.Cause)
	// return err.Error()
}

// Run starts running the dataplane. Note that configuration is not possible
// after calling this method.
func (d *DataPlane) Run() error {
/*
	d.mtx.Lock()
	d.running = true

	// d.initMetrics()

	read := func(ingressID uint16, rd BatchConn) {
		msgs := conn.NewReadMessages(inputBatchCnt)
        // (joao) Wildcards not supported, using "Wildcard" as a placeholder
		for Wildcard, msg := range msgs {
			// (joao) Make not supported
			// msg.Buffers[0] = make([]byte, bufSize)
			;
		}

		var scmpErr scmpError
		// (joao) Make not supported
		// metas := make([]conn.ReadMeta, inputBatchCnt)
		spkt := slayers.SCION{}
		buffer := gopacket.NewSerializeBuffer()
		// (joao) Make not supported
		// origPacket := make([]byte, bufSize)
		for d.running {
			pkts, err := rd.ReadBatch(msgs, metas)
			if err != nil {
                //(joao) string literals not supported
				//log.Debug("Failed to read batch", "err", err)
				// error metric
				continue
			}
			if pkts == 0 {
				continue
			}

            // (joao) Wildcards not supported, using "Wildcard" as a placeholder
			for wildcard, p := range msgs[:pkts] {
				origPacket = origPacket[:p.N]
				// TODO(karampok). Use meta for sanity checks.
                // (joao) array access here leads to parse error
				//p.Buffers[0] = p.Buffers[0][:p.N]
				//copy(origPacket[:p.N], p.Buffers[0])

				// input metric
				inputLabels := interfaceToMetricLabels(ingressID, d.localIA, d.neighborIAs)
				//d.Metrics.InputPacketsTotal.With(inputLabels).Inc()
				//d.Metrics.InputBytesTotal.With(inputLabels).Add(float64(p.N))

                // (joao) access to p.Buffers[0] leads to parser error
				// result, err := d.processPkt(ingressID, p.Buffers[0], p.Addr, spkt, origPacket, buffer)

				switch {
				case err == nil:
				case errors.As(err, &scmpErr):
					if !scmpErr.TypeCode.InfoMsg() {
                        // (joao) no support for string literals 
						// log.Debug("SCMP", "err", scmpErr, "dst_addr", p.Addr)
					}
					// SCMP go back the way they came.
					result.OutAddr = p.Addr
					result.OutConn = rd
				default:
                    // (joao) no support for string literals 
					// log.Debug("Error processing packet", "err", err)
					// d.Metrics.DroppedPacketsTotal.With(inputLabels).Inc()
                    //(joao) continue statement not supported
					// continue
				}
				if result.OutConn == nil { // e.g. BFD case no message is forwarded
                    //(joao) continue statement not supported
					// continue
				}
                // (joao) no support for wildcards
				wildcard, err = result.OutConn.WriteBatch(underlayconn.Messages([]ipv4.Message{{
					Buffers: [][]byte{result.OutPkt},
					Addr:    result.OutAddr,
				}}))
				if err != nil {
                    // (joao) no support for string literals 
					// log.Debug("Error writing packet", "err", err)
					// error metric
					continue
				}
				// ok metric
				// outputLabels := interfaceToMetricLabels(result.EgressID, d.localIA, d.neighborIAs)
				// d.Metrics.OutputPacketsTotal.With(outputLabels).Inc()
				// d.Metrics.OutputBytesTotal.With(outputLabels).Add(float64(len(result.OutPkt)))
			}

			// Reset buffers to original capacity.
            // (joao) no support for wildcards
			for wildcard, p := range msgs[:pkts] {
                // (joao) p.Buffers[0] leads to parser error
				// p.Buffers[0] = p.Buffers[0][:bufSize]
			}
		}
	}

	for k, v := range d.bfdSessions {
		go func(ifID uint16, c bfdSession) {
			defer log.HandlePanic()
			if err := c.Run(); err != nil && err != bfd.AlreadyRunning {
                // (joao) no support for parser errors
				//log.Error("BFD session failed to start", "ifID", ifID, "err", err)
                ; // (joao) semicolon keeps Gobra from throwing parser error (issue 93)
			}
		}(k, v)
	}
	for ifID, v := range d.external {
		go func(i uint16, c BatchConn) {
			defer log.HandlePanic()
			read(i, c)
		}(ifID, v)
	}
	go func(c BatchConn) {
		defer log.HandlePanic()
		read(0, c)
	}(d.internal)

	d.mtx.Unlock()
	for d.running {
		time.Sleep(time.Second)
	}
*/
	return nil
}

type BatchConn interface {
	// ReadBatch(underlayconn.Messages, []underlayconn.ReadMeta) (int, error)
	// WriteBatch(underlayconn.Messages) (int, error)
	Close() error
}

type DataPlane struct {
	external         map[uint16]BatchConn
	// linkTypes        map[uint16]topology.LinkType
	// neighborIAs      map[uint16]addr.IA
	internal         BatchConn
	internalIP       net.IP
	// internalNextHops map[uint16]net.Addr
	// svc              *services
	// macFactory       func() hash.Hash
	// bfdSessions      map[uint16]bfdSession
	localIA          addr.IA
	mtx              sync.Mutex
	running          bool
	// Metrics          *Metrics
}


func (d *DataPlane) processPkt(ingressID uint16, rawPkt []byte, srcAddr net.Addr, s slayers.SCION,
	origPacket []byte /*, buffer gopacket.SerializeBuffer*/) (processResult, error) //{

	// if err := s.DecodeFromBytes(rawPkt, gopacket.NilDecodeFeedback); err != nil {
	//	return processResult{}, err
	// }

//	buffer ignored for now
//	if err := buffer.Clear(); err != nil {
//        // (joao) changed in order to parse correctly
//        // return processResult{}, serrors.WrapStr("Failed to clear buffer", err)
//		return processResult{}, nil
//	}
	

	// switch s.PathType {
	//case slayers.PathTypeEmpty:

	/*
		if s.NextHdr == common.L4BFD {
			return processResult{}, d.processIntraBFD(srcAddr, s.Payload)
		}
		/ return processResult{}, serrors.WithCtx(unsupportedPathTypeNextHeader,
		  "type", s.PathType, "header", s.NextHdr)
		*/

	/*
	case slayers.PathTypeOneHop:
		if s.NextHdr == common.L4BFD {
            // (joao) parse error
			// ohp, ok := s.Path.(*onehop.Path)
            ohp, ok := nil, true
			if !ok {
				return processResult{}, malformedPath
			}
			return processResult{}, d.processInterBFD(ingressID, ohp, s.Payload)
		}
		return d.processOHP(ingressID, rawPkt, s, buffer)
	*/
	// (joao) assuming only a SCION path type
 	// case slayers.PathTypeSCION:
	//	return d.processSCION(ingressID, rawPkt, s, origPacket /*, buffer*/)
	/*
	default:
        // (joao) parse error
		// return processResult{}, serrors.WithCtx(unsupportedPathType, "type", s.PathType)
	*/
	// }
// }

requires typeOf(s.PathVar) == (*scion.Raw)
requires rawMem((s.PathVar).(*scion.Raw))
requires acc(d)
requires acc(d.external)
requires acc(&((s.PathVar).(*scion.Raw)).BaseEmbedded.PathMeta)
ensures typeOf(s.PathVar) == (*scion.Raw)
ensures rawMem((s.PathVar).(*scion.Raw))
ensures acc(d)
ensures acc(d.external)
ensures acc(&((s.PathVar).(*scion.Raw)).BaseEmbedded.PathMeta)
func (d *DataPlane) processSCION(ingressID uint16, rawPkt []byte, s slayers.SCION,
	origPacket []byte/*, buffer gopacket.SerializeBuffer*/) (processResult, error) {

	p@ := scionPacketProcessor{
		d:          d,
		ingressID:  ingressID,
		rawPkt:     rawPkt,
		scionLayer: s,
		origPacket: origPacket,
		//buffer:     buffer,
	}
	assert acc(&p.scionLayer.PathVar)
	fold parsePathContract(&p)
	assert acc(&p.scionLayer.PathVar)
	result, err := p.process();
	unfold parsePathContract(&p)
	return result, err
	// (lhalm) define return values to allow folding of predicate
	//return p.process()
}

// Establishes the restrictions on the scion packet processors
pred scionPacketProcessorP() {true}

type scionPacketProcessor struct {
	// d is a reference to the dataplane instance that initiated this processor.
	d *DataPlane
	// ingressID is the interface ID this packet came in, determined from the
	// socket.
	ingressID uint16
	// rawPkt is the raw packet, it is updated during processing to contain the
	// message to send out.
	rawPkt []byte

	// scionLayer is the SCION gopacket layer.
	scionLayer slayers.SCION

	// origPacket is the raw original packet, must not be modified.
	origPacket []byte

	// (joao) buffer ignored for now
	// buffer is the buffer that can be used to serialize gopacket layers.
	buffer gopacket.SerializeBuffer

	// path is the raw SCION path. Will be set during processing.
	// (lhalm) path makes Gobra throw an error
	pathVar *scion.Raw // path *scion.Raw

	// hopField is the current hopField field, is updated during processing.
	hopField *path.HopField
	// infoField is the current infoField field, is updated during processing.
	infoField *path.InfoField
	// segmentChange indicates if the path segment was changed during processing.
	segmentChange bool
}

requires parsePathContract(p)
requires acc(&p.scionLayer.PathVar)
ensures parsePathContract(p)
ensures acc(&p.scionLayer.PathVar)
func (p *scionPacketProcessor) process() (processResult, error) {
	if r, err := p.parsePath(); err != nil {
		return r, err
	}
	// if r, err := p.validatePktLen(); err != nil {
	// 	return r, err
	// }
//	/* (joao) skip for now
//	if err := p.updateNonConsDirIngressSegID(); err != nil {
//		return processResult{}, err
//	}
//	*/
//	/* (joao) skip for now
//	if r, err := p.verifyCurrentMAC(); err != nil {
//		return r, err
//	}
//	*/
//	/* (joao) skip by now
//	if r, err := p.handleIngressRouterAlert(); err != nil {
//		return r, err
//	}
//	*/ 
//
//	// Inbound: pkts destined to the local IA.
//	if p.scionLayer.DstIA.Equal(p.d.localIA) && int(p.path.PathMeta.CurrHF)+1 == p.path.NumHops {
//		a, r, err := p.resolveInbound()
//		if err != nil {
//			return r, err
//		}
//		return processResult{OutConn: p.d.internal, OutAddr: a, OutPkt: p.rawPkt}, nil
//	}
//
//	// Outbound: pkts leaving the local IA.
//	// BRTransit: pkts leaving from the same BR different interface.
//	/* (joao) assuming no cross-over at this point
//	if p.path.IsXover() {
//		if r, err := p.doXover(); err != nil {
//			return r, err
//		}
//	}*/
//	if r, err := p.validateEgressID(); err != nil {
//		return r, err
//	}
//	// handle egress router alert before we check if it's up because we want to
//	// send the reply anyway, so that trace route can pinpoint the exact link
//	// that failed.
//	if r, err := p.handleEgressRouterAlert(); err != nil {
//		return r, err
//	}
//	if r, err := p.validateEgressUp(); err != nil {
//		return r, err
//	}
//
//	/* (joao) skipped for now, leads to parser error
//	egressID := p.egressInterface()
//	if c, ok := p.d.external[egressID]; ok {
//		if err := p.processEgress(); err != nil {
//			return processResult{}, err
//		}
//		return processResult{EgressID: egressID, OutConn: c, OutPkt: p.rawPkt}, nil
//	}
//	*/
//
//	// ASTransit: pkts leaving from another AS BR.
//
/*
	if a, ok := (p.d.internalNextHops)[egressID]; ok {
		return processResult{OutConn: p.d.internal, OutAddr: a, OutPkt: p.rawPkt}, nil
	}
	*/

//	/*
//	errCode := slayers.SCMPCodeUnknownHopFieldEgress
//	if !p.infoField.ConsDir {
//		errCode = slayers.SCMPCodeUnknownHopFieldIngress
//	}
//	*/
//	return p.packSCMP(
//		&slayers.SCMP{
//			TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeParameterProblem, errCode),
//		},
//		&slayers.SCMPParameterProblem{Pointer: p.currentHopPointer()},
//		cannotRoute,
//	)
}

(*scion.Raw) implements slayers.Path {

	(r *scion.Raw) SerializeTo(b []byte) (err error) {
		err = r.SerializeTo(b)
	}

	(r *scion.Raw) DecodeFromBytes(b []byte) (err error) {
		err = r.DecodeFromBytes(b)
	}
	
	(r *scion.Raw) Reverse() (err error) {
		err = r.Reverse()
	}
	
	(r *scion.Raw) Len() (l int) {
		l = r.Len()
	}
}

// hopFieldAcc
requires acc(raw)
// requires acc(&raw.BaseEmbedded) implied by acces to raw
// requires acc(&raw.BaseEmbedded.NumINF) implied by access to raw
requires (scion.MetaLen + raw.BaseEmbedded.NumINF*path.InfoLen + int(raw.BaseEmbedded.PathMeta.CurrHF)*path.HopLen) >= 0
requires (scion.MetaLen + raw.BaseEmbedded.NumINF*path.InfoLen + int(raw.BaseEmbedded.PathMeta.CurrHF)*path.HopLen) + path.HopLen < len(raw.Raw)
requires forall i int :: 0 <= i && i < len(raw.Raw) ==> acc(&(raw.Raw)[i])
// infoFieldAcc
requires int(raw.BaseEmbedded.PathMeta.CurrINF) >= 0
requires (scion.MetaLen + int(raw.BaseEmbedded.PathMeta.CurrINF)*path.InfoLen)+path.InfoLen < len(raw.Raw)
// rawMem
requires acc(&raw.BaseEmbedded.PathMeta.CurrINF)
requires acc(&raw.BaseEmbedded.PathMeta.CurrHF)
// parsePathContract
requires acc(p)
func testMethod(raw *scion.Raw, p *scionPacketProcessor) {
	// p.scionLayer.PathVar = raw

	// fold scion.rawBytesAcc(raw.Raw)
	// fold scion.hopFieldAcc(raw, int(raw.BaseEmbedded.PathMeta.CurrHF))
	// assert acc(raw, 3/4) // Takes 8 minutes
	// assert acc(raw)

	// fold scion.rawBytesAcc(raw.Raw)
	// fold scion.infoFieldAcc(raw, int(raw.BaseEmbedded.PathMeta.CurrINF))
	// assert acc(raw, 1/4)
	// fold rawMem(raw)
	// fold parsePathContract(p)
	// assert false
}

pred parsePathContract(p *scionPacketProcessor) {
	acc(p, 1/2) &&
	acc(&p.pathVar, 1/2) &&
	acc(&p.hopField, 1/2) &&
	acc(&p.infoField, 1/2) &&
	acc(p.d, 1/2) &&
	acc(p.d.external, 1/2) &&
	typeOf(p.scionLayer.PathVar) == *scion.Raw &&
	rawMem((p.scionLayer.PathVar).(*scion.Raw)) &&
	acc(&((p.scionLayer.PathVar).(*scion.Raw)).BaseEmbedded.PathMeta, 1/8)
}

pred rawMem(raw *scion.Raw) {
	acc(raw, 1/4) &&
	scion.infoFieldAcc(raw, int(raw.BaseEmbedded.PathMeta.CurrINF)) &&
	scion.hopFieldAcc(raw, int(raw.BaseEmbedded.PathMeta.CurrHF))
}

requires parsePathContract(p)
requires acc(&p.scionLayer.PathVar)
ensures parsePathContract(p)
requires acc(&p.scionLayer.PathVar)
func (p *scionPacketProcessor) parsePath() (processResult, error) {
	unfold parsePathContract(p)
	var ok bool
	//(joao) causes parser error
	p.pathVar, ok = (p.scionLayer.PathVar).(*scion.Raw) //p.scionLayer.Path.(*scion.Raw)
	if !ok {
		// TODO(lukedirtwalker) parameter problem invalid path?
		fold parsePathContract(p)
		return processResult{}, nil//malformedPath
	}
	unfold rawMem(p.pathVar)
	var err error
	// (lhalm) path was renamed to pathVar to avoid error
	// p.hopField, err = p.path.GetCurrentHopField()
	p.hopField, err = p.pathVar.GetCurrentHopField()
	if err != nil {
		fold rawMem(p.pathVar)
		fold parsePathContract(p)
		// TODO(lukedirtwalker) parameter problem invalid path?
		return processResult{}, err
	}
	// // (lhalm) path was renamed to pathVar to avoid error
	// // p.infoField, err = p.path.GetCurrentInfoField()
	p.infoField, err = p.pathVar.GetCurrentInfoField()
	if err != nil {
		fold rawMem(p.pathVar)
		fold parsePathContract(p)
		// TODO(lukedirtwalker) parameter problem invalid path?
		return processResult{}, err
	}
	if r, err := p.validateHopExpiry(); err != nil {	
		fold rawMem(p.pathVar)
		fold parsePathContract(p)
		return r, err
	}
	if r, err := p.validateIngressID(); err != nil {
		fold rawMem(p.pathVar)
		fold parsePathContract(p)
		return r, err
	}
	fold rawMem(p.pathVar)
	fold parsePathContract(p)
	return processResult{}, nil
}

requires acc(p, 1/8)
requires acc(p.hopField, 1/8)
requires acc(p.infoField, 1/8)
requires acc(p.d, 1/8)
requires acc(p.d.external, 1/8)
requires acc(&p.pathVar.BaseEmbedded.PathMeta, 1/8)
requires acc(&p.scionLayer.PathVar)
requires typeOf(p.scionLayer.PathVar) == *scion.Raw
requires rawMem(p.pathVar)
ensures acc(p, 1/8)
ensures acc(p.hopField, 1/8)
ensures acc(p.infoField, 1/8)
ensures acc(p.d, 1/8)
ensures acc(p.d.external, 1/8)
ensures acc(&p.pathVar.BaseEmbedded.PathMeta, 1/8)
ensures acc(&p.scionLayer.PathVar)
ensures typeOf(p.scionLayer.PathVar) == *scion.Raw
ensures rawMem(p.pathVar)
func (p *scionPacketProcessor) validateHopExpiry() (processResult, error) {
	expiration := (util.SecsToTime(p.infoField.Timestamp)).Add(path.ExpTimeToDuration(p.hopField.ExpTime))
	expired := expiration.Before(time.Now())
	if !expired {
		return processResult{}, nil
	}
	return p.packSCMP(
		&slayers.SCMP{TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeParameterProblem,
			slayers.SCMPCodePathExpired),
		},
		&slayers.SCMPParameterProblem{Pointer: p.currentHopPointer()},
		// (lhalm) rename path to pathVar and explicitly use embedded struct
		// serrors.New("expired hop", "cons_dir", p.infoField.ConsDir, "if_id", p.ingressID,
		// 	"curr_inf", p.path.PathMeta.CurrINF, "curr_hf", p.path.PathMeta.CurrHF),
		serrors.New("expired hop", "cons_dir", p.infoField.ConsDir, "if_id", p.ingressID,
			"curr_inf", p.pathVar.BaseEmbedded.PathMeta.CurrINF, "curr_hf", p.pathVar.BaseEmbedded.PathMeta.CurrHF),
	)
}

requires acc(p, 1/8)
requires acc(p.hopField, 1/8)
requires acc(p.infoField, 1/8)
requires acc(p.d, 1/8)
requires acc(p.d.external, 1/8)
requires acc(&p.scionLayer.PathVar)
requires typeOf(p.scionLayer.PathVar) == *scion.Raw
requires rawMem(p.pathVar)
ensures acc(p, 1/8)
ensures acc(p.hopField, 1/8)
ensures acc(p.infoField, 1/8)
ensures acc(p.d, 1/8)
ensures acc(p.d.external, 1/8)
ensures acc(&p.scionLayer.PathVar)
ensures typeOf(p.scionLayer.PathVar) == *scion.Raw
ensures rawMem(p.pathVar)
func (p *scionPacketProcessor) validateIngressID() (processResult, error) {
	pktIngressID := p.hopField.ConsIngress
	errCode := slayers.SCMPCodeUnknownHopFieldIngress
	if !p.infoField.ConsDir {
		pktIngressID = p.hopField.ConsEgress
		errCode = slayers.SCMPCodeUnknownHopFieldEgress
	}
	if p.ingressID != 0 && p.ingressID != pktIngressID {
		return p.packSCMP(
			&slayers.SCMP{
				TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeParameterProblem, errCode),
			},
			&slayers.SCMPParameterProblem{Pointer: p.currentHopPointer()},
			serrors.New("ingress interface invalid",
				"pkt_ingress", pktIngressID, "router_ingress", p.ingressID),
		)
	}
	return processResult{}, nil
}

requires acc(&p.scionLayer.PayloadLen, 1/2)
requires acc(&p.scionLayer.EmbeddedLayer.Payload, 1/2)
requires acc(p, 1/8)
requires acc(p.d, 1/8)
requires acc(p.d.external, 1/8)
requires acc(p.infoField, 1/8)
requires acc(p.hopField, 1/8)
requires acc(&p.scionLayer.PathVar)
requires typeOf(p.scionLayer.PathVar) == *scion.Raw
requires rawMem(p.pathVar)
ensures acc(p, 1/8)
ensures acc(&p.scionLayer.PayloadLen, 1/2)
ensures acc(&p.scionLayer.EmbeddedLayer.Payload, 1/2)
ensures acc(p.d, 1/8)
ensures acc(p.d.external, 1/8)
ensures acc(p.infoField, 1/8)
ensures acc(p.hopField, 1/8)
ensures acc(&p.scionLayer.PathVar)
ensures typeOf(p.scionLayer.PathVar) == *scion.Raw
ensures rawMem(p.pathVar)
func (p *scionPacketProcessor) validatePktLen() (processResult, error) {
	if int(p.scionLayer.PayloadLen) == len(p.scionLayer.EmbeddedLayer.Payload) {
		return processResult{}, nil
	}
	return p.packSCMP(
		&slayers.SCMP{
			TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeParameterProblem,
				slayers.SCMPCodeInvalidPacketSize),
		},
		&slayers.SCMPParameterProblem{Pointer: 0},
		serrors.New("bad packet size",
			"header", p.scionLayer.PayloadLen, "actual", len(p.scionLayer.EmbeddedLayer.Payload)),
	)
}

(gopacket.UnsupportedLayerType) implements error {

	(e gopacket.UnsupportedLayerType) Error() (err string) {
		err = e.Error()
	}
}

requires acc(p, 1/16)
requires acc(p.d, 1/16)
requires acc(p.d.external, 1/16)
requires acc(p.infoField, 1/16)
requires acc(p.hopField, 1/16)
requires acc(&p.scionLayer.PathVar)
requires typeOf(p.scionLayer.PathVar) == *scion.Raw
requires acc(&((p.scionLayer.PathVar).(*scion.Raw)).Raw)
requires rawMem(p.pathVar)
ensures acc(p, 1/16)
ensures acc(p.d, 1/16)
ensures acc(p.d.external, 1/16)
ensures acc(p.infoField, 1/16)
ensures acc(p.hopField, 1/16)
ensures acc(&p.scionLayer.PathVar)
ensures typeOf(p.scionLayer.PathVar) == *scion.Raw
ensures acc(&((p.scionLayer.PathVar).(*scion.Raw)).Raw)
ensures rawMem(p.pathVar)
func (p *scionPacketProcessor) packSCMP(scmpH *slayers.SCMP, scmpP gopacket.SerializableLayer, cause error) (processResult, error) {
	// parse everything to see if the original packet was an SCMP error.
	var (
		scionLayer@ slayers.SCION
		udpLayer@   slayers.UDP
		hbhExtn@    slayers.HopByHopExtn
		e2eExtn@    slayers.EndToEndExtn
		scmpLayer@  slayers.SCMP
	)
	parser := gopacket.NewDecodingLayerParser(
		0 /* slayers.LayerTypeSCION */, &scionLayer, &udpLayer, &hbhExtn, &e2eExtn, &scmpLayer,
	)
	// (lhalm) extremely slow, why?
	//decoded := make(gopacket.LayerType, 5)
	var decoded@ []gopacket.LayerType
	if err := parser.DecodeLayers(p.origPacket, &decoded); err != nil {
		if _, ok := err.(gopacket.UnsupportedLayerType); !ok {
			return processResult{}, serrors.WrapStr("decoding packet", err)
		}
	}
	// // in reply to an SCMP error do nothing:
	// if decoded[len(decoded)-1] == slayers.LayerTypeSCMP && !scmpLayer.TypeCode.InfoMsg() {
	// 	return processResult{}, serrors.WrapStr("SCMP error for SCMP error pkt -> DROP", cause)
	// }

	unfold rawMem(p.pathVar)

	// (lhalm): Rename p.path to p.pathVar
	// (lhalm): Add BaseEmbedded due to missing composition
	// the quoted packet is the packet in its current state
	// if err := p.path.SetInfoField(p.infoField, int(p.path.PathMeta.CurrINF)); err != nil {
	// 	return processResult{}, serrors.WrapStr("update info field", err)
	// }
	if err := p.pathVar.SetInfoField(p.infoField, int(p.pathVar.BaseEmbedded.PathMeta.CurrINF)); err != nil {
		fold rawMem(p.pathVar)
		return processResult{}, serrors.WrapStr("update info field", err)
	}
	
	// (lhalm): Rename p.path to p.pathVar
	// (lhalm): Add BaseEmbedded due to missing composition
	// if err := p.path.SetHopField(p.hopField, int(p.path.PathMeta.CurrHF)); err != nil {
	// 	return processResult{}, serrors.WrapStr("update hop field", err)
	// }
	if err := p.pathVar.SetHopField(p.hopField, int(p.pathVar.BaseEmbedded.PathMeta.CurrHF)); err != nil {
		fold rawMem(p.pathVar)
		return processResult{}, serrors.WrapStr("update hop field", err)
	}
	fold rawMem(p.pathVar)
	if err := p.buffer.Clear(); err != nil {
		return processResult{}, err
	}
	if err := p.scionLayer.SerializeTo(p.buffer, gopacket.SerializeOptions{}); err != nil {
		return processResult{}, err
	}
	// quoteLen is used to limit the size of the quote buffer, the final quote
	// length is calculated inside the scmpPacker.
	quoteLen := len(p.origPacket)
	if quoteLen > slayers.MaxSCMPPacketLen {
		quoteLen = slayers.MaxSCMPPacketLen
	}
	// (lhalm) Very slow, why?
	// quote := make([]byte, quoteLen)
	var quote []byte
	// inhale forall i int :: 0 <= i && i < (quoteLen) ==> acc(&quote[i])
	updated := p.buffer.Bytes()
	// copy(quote[:len(updated)], updated)
	// copy(quote[len(updated):], p.origPacket[len(updated):quoteLen])

	_, external := (p.d.external)[p.ingressID]
	rawSCMP, err := scmpPacker{
		internalIP: p.d.internalIP,
		localIA:    p.d.localIA,
		origPacket: p.origPacket,
		ingressID:  p.ingressID,
		scionL:     &p.scionLayer,
		buffer:     p.buffer,
		quote:      quote,
	}.prepareSCMP(
		scmpH,
		scmpP,
		external,
		cause,
	)
	return processResult{OutPkt: rawSCMP}, err
}

func (p *scionPacketProcessor) currentHopPointer() uint16 {
	// return uint16(slayers.CmnHdrLen + p.scionLayer.AddrHdrLen() +
	// 	scion.MetaLen + path.InfoLen*p.path.NumINF + path.HopLen*int(p.path.PathMeta.CurrHF))
}

type processResult struct {
	EgressID uint16
	OutConn  BatchConn
	OutAddr  net.Addr
	OutPkt   []byte
}

type scmpPacker struct {
	internalIP net.IP
	localIA    addr.IA
	origPacket []byte
	ingressID  uint16

	scionL *slayers.SCION
	buffer gopacket.SerializeBuffer
	quote  []byte
}

(*scion.Decoded) implements slayers.Path {

	(d *scion.Decoded) SerializeTo(b []byte) (err error) {
		err = d.SerializeTo(b)
	}

	(d *scion.Decoded) DecodeFromBytes(b []byte) (err error) {
		err = d.DecodeFromBytes(b)
	}
	
	(d *scion.Decoded) Reverse() (err error) {
		err = d.Reverse()
	}
	
	(d *scion.Decoded) Len() (l int) {
		l = d.Len()
	}
}

requires acc(&s.scionL.PathVar)
requires typeOf(s.scionL.PathVar) == *scion.Raw
requires acc(&((s.scionL.PathVar).(*scion.Raw)).Raw)
requires acc(&s.scionL.DstIA)
requires acc(&s.scionL.SrcIA)
func (s scmpPacker) prepareSCMP(scmpH *slayers.SCMP, scmpP gopacket.SerializableLayer,
	incPath bool, cause error) ([]byte, error) {

	// We use the original packet but put the already updated path, because usually a router will
	// not keep a copy of the original/unmodified packet around.

	// (lhalm) rename to PathVar
	// pathRaw := s.scionL.Path.(*scion.Raw).Raw
	pathRaw := ((s.scionL.PathVar).(*scion.Raw)).Raw

	// (lhalm) create local variable because global ones do not work
	tmp := gopacket.NilDecodeFeedback{}
	// if err := s.scionL.DecodeFromBytes(s.origPacket, gopacket.NilDecodeFeedback); err != nil {
	// 	panic(err)
	// }
	err := s.scionL.DecodeFromBytes(s.origPacket, tmp)
	if err != nil {
		// (lhalm) causes NodeNotInTree exception
		//panic(err)
	}
	// (lhalm) rename to PathVar
	// path := s.scionL.Path.(*scion.Raw)
	path := (s.scionL.PathVar).(*scion.Raw)

	path.Raw = pathRaw
	decPath, err := path.ToDecoded()
	if err != nil {
		// (lhalm) create local var since global is not supported
		cannotRoute := serrors.New("cannot route, dropping pkt")
		return nil, serrors.Wrap(cannotRoute, err, "details", "decoding raw path")
	}
	// (lhalm) rename to PathVar
	// s.scionL.Path = decPath
	s.scionL.PathVar = decPath
	if err := decPath.Reverse(); err != nil {
		// (lhalm) create local var since global is not supported
		cannotRoute := serrors.New("cannot route, dropping pkt")
		return nil, serrors.Wrap(cannotRoute, err, "details", "reversing path for SCMP")
	}
	// (lhalm) call IsXover on embedded struct since composition is not supported
	// if incPath || decPath.IsXover() {
	if incPath || decPath.BaseEmbedded.IsXover() {
		// (lhalm) read PathMeta from embedded since composition is not supported
		//infoField := (decPath.InfoFields)[decPath.PathMeta.CurrINF]
		infoField := (decPath.InfoFields)[decPath.BaseEmbedded.PathMeta.CurrINF]
		if infoField.ConsDir {
			// (lhalm) read PathMeta from embedded since composition is not supported
			// hopField := decPath.HopFields[decPath.PathMeta.CurrHF]
			hopField := (decPath.HopFields)[decPath.BaseEmbedded.PathMeta.CurrHF]
			infoField.UpdateSegID(hopField.Mac)
		}
		// (lhalm) call IncPath on embedded since composition is not supported
		// if err := decPath.IncPath(); err != nil {
		if err := decPath.BaseEmbedded.IncPath(); err != nil {
			// (lhalm) create local var since global is not supported
			cannotRoute := serrors.New("cannot route, dropping pkt")
			return nil, serrors.Wrap(cannotRoute, err, "details", "incrementing path for SCMP")
		}
	}

	s.scionL.DstIA = s.scionL.SrcIA
	s.scionL.SrcIA = s.localIA
	srcA, err := s.scionL.SrcAddr()
	if err != nil {
		// (lhalm) create local var since global is not supported
		cannotRoute := serrors.New("cannot route, dropping pkt")
		return nil, serrors.Wrap(cannotRoute, err, "details", "extracting src addr")
	}
	if err := s.scionL.SetDstAddr(srcA); err != nil {
		// (lhalm) create local var since global is not supported
		cannotRoute := serrors.New("cannot route, dropping pkt")
		return nil, serrors.Wrap(cannotRoute, err, "details", "setting dest addr")
	}
	// (lhalm) net package not yet supported it seems
	// if err := s.scionL.SetSrcAddr(&net.IPAddr{IP: s.internalIP}); err != nil {
	// 	// (lhalm) create local var since global is not supported
	// 	cannotRoute := serrors.New("cannot route, dropping pkt")
	// 	return nil, serrors.Wrap(cannotRoute, err, "details", "setting src addr")
	// }
	s.scionL.NextHdr = common.L4SCMP

	scmpH.SetNetworkLayerForChecksum(s.scionL)

	if err := s.buffer.Clear(); err != nil {
		return nil, err
	}

	sopts := gopacket.SerializeOptions{
		ComputeChecksums: true,
		FixLengths:       true,
	}
	scmpLayers := []gopacket.SerializableLayer{s.scionL ,scmpH, scmpP}
	if cause != nil {
		// add quote for errors.
		// (lhalm) rename to PathVar
		// hdrLen := slayers.CmnHdrLen + s.scionL.AddrHdrLen() + s.scionL.Path.Len()
		hdrLen := slayers.CmnHdrLen + s.scionL.AddrHdrLen() + s.scionL.PathVar.Len()
		switch scmpH.TypeCode.Type() {
		case slayers.SCMPTypeExternalInterfaceDown:
			hdrLen += 20
		case slayers.SCMPTypeInternalConnectivityDown:
			hdrLen += 28
		default:
			hdrLen += 8
		}
		maxQuoteLen := slayers.MaxSCMPPacketLen - hdrLen
		if len(s.quote) > maxQuoteLen {
			s.quote = (s.quote)[:maxQuoteLen]
		}
		// (lhalm) implementation proof for type alias []byte currently not possible
		// scmpLayers = append(scmpLayers, gopacket.Payload(s.quote))
	}
	err = gopacket.SerializeLayers(s.buffer, sopts, scmpLayers...)
	if err != nil {
		// (lhalm) create local var since global is not supported
		cannotRoute := serrors.New("cannot route, dropping pkt")
		return nil, serrors.Wrap(cannotRoute, err, "details", "serializing SCMP message")
	}
	return s.buffer.Bytes(), scmpError{TypeCode: scmpH.TypeCode, Cause: cause}
}

/*func (p *scionPacketProcessor) packSCMP(scmpH *slayers.SCMP, scmpP gopacket.SerializableLayer,
	cause error) (processResult, error) {

	// parse everything to see if the original packet was an SCMP error.
	var (
		scionLayer slayers.SCION
		udpLayer   slayers.UDP
		hbhExtn    slayers.HopByHopExtn
		e2eExtn    slayers.EndToEndExtn
		scmpLayer  slayers.SCMP
	)
	parser := gopacket.NewDecodingLayerParser(
		slayers.LayerTypeSCION, &scionLayer, &udpLayer, &hbhExtn, &e2eExtn, &scmpLayer,
	)
	decoded := make([]gopacket.LayerType, 5)
	if err := parser.DecodeLayers(p.origPacket, &decoded); err != nil {
		if _, ok := err.(gopacket.UnsupportedLayerType); !ok {
			return processResult{}, serrors.WrapStr("decoding packet", err)
		}
	}
	// in reply to an SCMP error do nothing:
	if decoded[len(decoded)-1] == slayers.LayerTypeSCMP && !scmpLayer.TypeCode.InfoMsg() {
		return processResult{}, serrors.WrapStr("SCMP error for SCMP error pkt -> DROP", cause)
	}

	// the quoted packet is the packet in its current state
	if err := p.path.SetInfoField(p.infoField, int(p.path.PathMeta.CurrINF)); err != nil {
		return processResult{}, serrors.WrapStr("update info field", err)
	}
	if err := p.path.SetHopField(p.hopField, int(p.path.PathMeta.CurrHF)); err != nil {
		return processResult{}, serrors.WrapStr("update hop field", err)
	}
	if err := p.buffer.Clear(); err != nil {
		return processResult{}, err
	}
	if err := p.scionLayer.SerializeTo(p.buffer, gopacket.SerializeOptions{}); err != nil {
		return processResult{}, err
	}
	// quoteLen is used to limit the size of the quote buffer, the final quote
	// length is calculated inside the scmpPacker.
	quoteLen := len(p.origPacket)
	if quoteLen > slayers.MaxSCMPPacketLen {
		quoteLen = slayers.MaxSCMPPacketLen
	}
	quote := make([]byte, quoteLen)
	updated := p.buffer.Bytes()
	copy(quote[:len(updated)], updated)
	copy(quote[len(updated):], p.origPacket[len(updated):quoteLen])

	_, external := p.d.external[p.ingressID]
	rawSCMP, err := scmpPacker{
		internalIP: p.d.internalIP,
		localIA:    p.d.localIA,
		origPacket: p.origPacket,
		ingressID:  p.ingressID,
		scionL:     &p.scionLayer,
		buffer:     p.buffer,
		quote:      quote,
	}.prepareSCMP(
		scmpH,
		scmpP,
		external,
		cause,
	)
	return processResult{OutPkt: rawSCMP}, err
}

func (p *scionPacketProcessor) parsePath() (processResult, error) {
	var ok bool
	p.path, ok = p.scionLayer.Path.(*scion.Raw)
	if !ok {
		// TODO(lukedirtwalker) parameter problem invalid path?
		return processResult{}, malformedPath
	}
	var err error
	p.hopField, err = p.path.GetCurrentHopField()
	if err != nil {
		// TODO(lukedirtwalker) parameter problem invalid path?
		return processResult{}, err
	}
	p.infoField, err = p.path.GetCurrentInfoField()
	if err != nil {
		// TODO(lukedirtwalker) parameter problem invalid path?
		return processResult{}, err
	}
	if r, err := p.validateHopExpiry(); err != nil {
		return r, err
	}
	if r, err := p.validateIngressID(); err != nil {
		return r, err
	}
	return processResult{}, nil
}

func (p *scionPacketProcessor) validateHopExpiry() (processResult, error) {
	expiration := util.SecsToTime(p.infoField.Timestamp).
		Add(path.ExpTimeToDuration(p.hopField.ExpTime))
	expired := expiration.Before(time.Now())
	if !expired {
		return processResult{}, nil
	}
	return p.packSCMP(
		&slayers.SCMP{TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeParameterProblem,
			slayers.SCMPCodePathExpired),
		},
		&slayers.SCMPParameterProblem{Pointer: p.currentHopPointer()},
		serrors.New("expired hop", "cons_dir", p.infoField.ConsDir, "if_id", p.ingressID,
			"curr_inf", p.path.PathMeta.CurrINF, "curr_hf", p.path.PathMeta.CurrHF),
	)
}

func (p *scionPacketProcessor) validateIngressID() (processResult, error) {
	pktIngressID := p.hopField.ConsIngress
	errCode := slayers.SCMPCodeUnknownHopFieldIngress
	if !p.infoField.ConsDir {
		pktIngressID = p.hopField.ConsEgress
		errCode = slayers.SCMPCodeUnknownHopFieldEgress
	}
	if p.ingressID != 0 && p.ingressID != pktIngressID {
		return p.packSCMP(
			&slayers.SCMP{
				TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeParameterProblem, errCode),
			},
			&slayers.SCMPParameterProblem{Pointer: p.currentHopPointer()},
			serrors.New("ingress interface invalid",
				"pkt_ingress", pktIngressID, "router_ingress", p.ingressID),
		)
	}
	return processResult{}, nil
}

func (p *scionPacketProcessor) validateEgressID() (processResult, error) {
	pktEgressID := p.egressInterface()
	_, ih := p.d.internalNextHops[pktEgressID]
	_, eh := p.d.external[pktEgressID]
	if !ih && !eh {
		errCode := slayers.SCMPCodeUnknownHopFieldEgress
		if !p.infoField.ConsDir {
			errCode = slayers.SCMPCodeUnknownHopFieldIngress
		}
		return p.packSCMP(
			&slayers.SCMP{
				TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeParameterProblem, errCode),
			},
			&slayers.SCMPParameterProblem{Pointer: p.currentHopPointer()},
			cannotRoute,
		)
	}

	if !p.segmentChange {
		return processResult{}, nil
	}
	// Check that the interface pair is valid on a segment switch.
	// Having a segment change received from the internal interface is never valid.
	ingress, egress := p.d.linkTypes[p.ingressID], p.d.linkTypes[pktEgressID]
	switch {
	case ingress == topology.Core && egress == topology.Child:
		return processResult{}, nil
	case ingress == topology.Child && egress == topology.Core:
		return processResult{}, nil
	case ingress == topology.Child && egress == topology.Child:
		return processResult{}, nil
	default:
		return p.packSCMP(
			&slayers.SCMP{
				TypeCode: slayers.CreateSCMPTypeCode(
					slayers.SCMPTypeParameterProblem,
					slayers.SCMPCodeInvalidSegmentChange,
				),
			},
			&slayers.SCMPParameterProblem{Pointer: p.currentInfoPointer()},
			serrors.WithCtx(cannotRoute, "ingress_id", p.ingressID, "ingress_type", ingress,
				"egress_id", pktEgressID, "egress_type", egress))
	}
}

func (p *scionPacketProcessor) updateNonConsDirIngressSegID() error {
	// against construction dir the ingress router updates the SegID, ifID == 0
	// means this comes from this AS itself, so nothing has to be done.
	// TODO(lukedirtwalker): For packets destined to peer links this shouldn't
	// be updated.
	if !p.infoField.ConsDir && p.ingressID != 0 {
		p.infoField.UpdateSegID(p.hopField.Mac)
		if err := p.path.SetInfoField(p.infoField, int(p.path.PathMeta.CurrINF)); err != nil {
			return serrors.WrapStr("update info field", err)
		}
		if err := updateSCIONLayer(p.rawPkt, p.scionLayer, p.buffer); err != nil {
			return err
		}
	}
	return nil
}

func (p *scionPacketProcessor) currentInfoPointer() uint16 {
	return uint16(slayers.CmnHdrLen + p.scionLayer.AddrHdrLen() +
		scion.MetaLen + path.InfoLen*int(p.path.PathMeta.CurrINF))
}

func (p *scionPacketProcessor) currentHopPointer() uint16 {
	return uint16(slayers.CmnHdrLen + p.scionLayer.AddrHdrLen() +
		scion.MetaLen + path.InfoLen*p.path.NumINF + path.HopLen*int(p.path.PathMeta.CurrHF))
}

func (p *scionPacketProcessor) verifyCurrentMAC() (processResult, error) {
	if err := path.VerifyMAC(p.d.macFactory(), p.infoField, p.hopField); err != nil {
		return p.packSCMP(
			&slayers.SCMP{TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeParameterProblem,
				slayers.SCMPCodeInvalidHopFieldMAC),
			},
			&slayers.SCMPParameterProblem{Pointer: p.currentHopPointer()},
			serrors.WithCtx(err, "cons_dir", p.infoField.ConsDir, "if_id", p.ingressID,
				"curr_inf", p.path.PathMeta.CurrINF, "curr_hf", p.path.PathMeta.CurrHF,
				"seg_id", p.infoField.SegID),
		)
	}
	return processResult{}, nil
}

func (p *scionPacketProcessor) resolveInbound() (net.Addr, processResult, error) {
	a, err := p.d.resolveLocalDst(p.scionLayer)
	switch {
	case errors.Is(err, noSVCBackend):
		r, err := p.packSCMP(
			&slayers.SCMP{
				TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeDestinationUnreachable,
					slayers.SCMPCodeNoRoute),
			},
			&slayers.SCMPDestinationUnreachable{}, err)
		return nil, r, err
	default:
		return a, processResult{}, nil
	}
}

func (p *scionPacketProcessor) processEgress() error {
	// we are the egress router and if we go in construction direction we
	// need to update the SegID.
	if p.infoField.ConsDir {
		p.infoField.UpdateSegID(p.hopField.Mac)
		if err := p.path.SetInfoField(p.infoField, int(p.path.PathMeta.CurrINF)); err != nil {
			// TODO parameter problem invalid path
			return serrors.WrapStr("update info field", err)
		}
	}
	if err := p.path.IncPath(); err != nil {
		// TODO parameter problem invalid path
		return serrors.WrapStr("incrementing path", err)
	}
	if err := updateSCIONLayer(p.rawPkt, p.scionLayer, p.buffer); err != nil {
		return err
	}
	return nil
}

func (p *scionPacketProcessor) doXover() (processResult, error) {
	p.segmentChange = true
	if err := p.path.IncPath(); err != nil {
		// TODO parameter problem invalid path
		return processResult{}, serrors.WrapStr("incrementing path", err)
	}
	var err error
	if p.hopField, err = p.path.GetCurrentHopField(); err != nil {
		// TODO parameter problem invalid path
		return processResult{}, err
	}
	if p.infoField, err = p.path.GetCurrentInfoField(); err != nil {
		// TODO parameter problem invalid path
		return processResult{}, err
	}
	if err := updateSCIONLayer(p.rawPkt, p.scionLayer, p.buffer); err != nil {
		return processResult{}, err
	}
	if r, err := p.validateHopExpiry(); err != nil {
		return r, err
	}
	// verify the new block
	if r, err := p.verifyCurrentMAC(); err != nil {
		return r, serrors.WithCtx(err, "info", "after xover")
	}
	return processResult{}, nil
}

func (p *scionPacketProcessor) egressInterface() uint16 {
	if p.infoField.ConsDir {
		return p.hopField.ConsEgress
	}
	return p.hopField.ConsIngress
}

func (p *scionPacketProcessor) validateEgressUp() (processResult, error) {
	egressID := p.egressInterface()
	if v, ok := p.d.bfdSessions[egressID]; ok {
		if !v.IsUp() {
			scmpH := &slayers.SCMP{
				TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeExternalInterfaceDown, 0),
			}
			var scmpP gopacket.SerializableLayer = &slayers.SCMPExternalInterfaceDown{
				IA:   p.d.localIA,
				IfID: uint64(egressID),
			}
			if _, external := p.d.external[egressID]; !external {
				scmpH.TypeCode =
					slayers.CreateSCMPTypeCode(slayers.SCMPTypeInternalConnectivityDown, 0)
				scmpP = &slayers.SCMPInternalConnectivityDown{
					IA:      p.d.localIA,
					Ingress: uint64(p.ingressID),
					Egress:  uint64(egressID),
				}
			}
			return p.packSCMP(scmpH, scmpP, serrors.New("bfd session down"))
		}
	}
	return processResult{}, nil
}

func (p *scionPacketProcessor) handleIngressRouterAlert() (processResult, error) {
	if p.ingressID == 0 {
		return processResult{}, nil
	}
	ingressAlert := (!p.infoField.ConsDir && p.hopField.EgressRouterAlert) ||
		(p.infoField.ConsDir && p.hopField.IngressRouterAlert)
	if !ingressAlert {
		return processResult{}, nil
	}
	p.hopField.IngressRouterAlert = false
	return p.handleSCMPTraceRouteRequest(p.ingressID)
}

func (p *scionPacketProcessor) handleEgressRouterAlert() (processResult, error) {
	egressAlert := (p.infoField.ConsDir && p.hopField.EgressRouterAlert) ||
		(!p.infoField.ConsDir && p.hopField.IngressRouterAlert)
	if !egressAlert {
		return processResult{}, nil
	}
	egressID := p.egressInterface()
	if _, ok := p.d.external[egressID]; !ok {
		return processResult{}, nil
	}
	p.hopField.EgressRouterAlert = false
	return p.handleSCMPTraceRouteRequest(egressID)
}

func (p *scionPacketProcessor) handleSCMPTraceRouteRequest(
	interfaceID uint16) (processResult, error) {

	var scmpH slayers.SCMP
	if err := scmpH.DecodeFromBytes(p.scionLayer.Payload, gopacket.NilDecodeFeedback); err != nil {
		log.Debug("Parsing SCMP header of router alert", "err", err)
		return processResult{}, nil
	}
	if scmpH.TypeCode != slayers.CreateSCMPTypeCode(slayers.SCMPTypeTracerouteRequest, 0) {
		log.Debug("Packet with router alert, but not traceroute request",
			"type_code", scmpH.TypeCode)
		return processResult{}, nil
	}
	var scmpP slayers.SCMPTraceroute
	if err := scmpP.DecodeFromBytes(scmpH.Payload, gopacket.NilDecodeFeedback); err != nil {
		log.Debug("Parsing SCMPTraceroute", "err", err)
		return processResult{}, nil
	}
	scmpH = slayers.SCMP{
		TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeTracerouteReply, 0),
	}
	scmpP = slayers.SCMPTraceroute{
		Identifier: scmpP.Identifier,
		Sequence:   scmpP.Sequence,
		IA:         p.d.localIA,
		Interface:  uint64(interfaceID),
	}
	return p.packSCMP(&scmpH, &scmpP, nil)
}

func (p *scionPacketProcessor) validatePktLen() (processResult, error) {
	if int(p.scionLayer.PayloadLen) == len(p.scionLayer.Payload) {
		return processResult{}, nil
	}
	return p.packSCMP(
		&slayers.SCMP{
			TypeCode: slayers.CreateSCMPTypeCode(slayers.SCMPTypeParameterProblem,
				slayers.SCMPCodeInvalidPacketSize),
		},
		&slayers.SCMPParameterProblem{Pointer: 0},
		serrors.New("bad packet size",
			"header", p.scionLayer.PayloadLen, "actual", len(p.scionLayer.Payload)),
	)
}*/