package fact

import (
    . "gobra/io_verification/message"
)

type Fact domain {

    // each fact has a unique 'type':
    func getType(Fact) int

    // incoming batches
    func inFact(Message) Fact
    func getIn(Fact) Message

    // outgoing batches
    func outFact(Message) Fact
    func getOut(Fact) Message

    // message
    func messageFact(Message) Fact
    func getMessage(Fact) Message

    // processed message
    func processedMessageFact(Message) Fact
    func getProcessedMessage(Fact) Message

    // inFact injective
    axiom {
        forall t Message :: { inFact(t) } getIn(inFact(t)) == t && getType(inFact(t)) == 0
    }

    // outFact injective
    axiom {
        forall t Message :: { outFact(t) } getOut(outFact(t)) == t && getType(outFact(t)) == 1
    }

    axiom {
        forall t1 Message, t2 Message :: t1 != t2 ==> outFact(t1) != outFact(t2)
    }

    // messageFact injective
    axiom {
        forall t Message :: { messageFact(t) } getMessage(messageFact(t)) == t && getType(messageFact(t)) == 2
    }

    // processed message injective
    axiom {
        forall t Message :: { processedMessageFact(t) } getProcessedMessage(processedMessageFact(t)) == t && getType(processedMessageFact(t)) == 3
    }
}